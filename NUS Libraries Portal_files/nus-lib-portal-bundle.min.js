$(function () {
    // Isn't design view.
    if (typeof (angular) == 'undefined') {
        $(".spaces .container-custom .stackable.swiper-container").addClass("d-md-none");
        var halfTitlelayoutStackable = $(".half-title-layout-stackable");

        $(halfTitlelayoutStackable).each(function (index, element) {
            var swiperSlide = $(element).find('.half-title-layout.stackable').children().clone();
            $(swiperSlide).attr('class', 'col-md-4');
            $(swiperSlide).attr('style', '');
            $(swiperSlide).attr('style', '');
            $(element).find('.stack-region').html(swiperSlide);
            if (halfTitlelayoutStackable.length == (index + 1)) {
                EnableCarousel()
            }
        });

        function EnableCarousel() {
            $(".spaces .container-custom .swiper-container").addClass("mySwiperSpaces");
            new Swiper('.mySwiperSpaces', {
                slidesPerView: 1,
                spaceBetween: 30,
                slidesPerGroup: 1,
                loop: false,
                loopFillGroupWithBlank: true,
                navigation: {
                    nextEl: '.swiper-button-next',
                    prevEl: '.swiper-button-prev',
                },
                breakpoints: {
                    375: {
                        slidesPerView: 1.2,
                        spaceBetween: 20,
                        slidesPerGroup: 1,
                        loop: false,
                        watchSlidesVisibility: true,
                        loopFillGroupWithBlank: true,
                    },
                    768: {
                        slidesPerView: 3,
                        spaceBetween: 30,
                        loop: false,
                        centerInsufficientSlides: true
                    },
                },
            });
        }

        // Disable pre and next button if number slide < 4;
        $(".swiper-container.mySwiperSpaces").each(function (index, element) {
            var slides = $(element).find(".swiper-slide");
            if (slides.length < 4) {
                if (slides.length <= 1) {
                    $(element).find(".swiper-button-next").addClass("d-none");
                    $(element).find(".swiper-button-prev").addClass("d-none");
                } else {
                    $(element).find(".swiper-button-next").addClass("d-md-none");
                    $(element).find(".swiper-button-prev").addClass("d-md-none");
                }
            }
        });
    }
});

$(function () {
    // Isn't design view.
    if (typeof (angular) == 'undefined') {
        $(".carousel-discover .container-custom .stackable.swiper-container").addClass("d-md-none");
        var dynamicCardlayoutStackable = $(".dynamic-card-layout-stackable");

        $(dynamicCardlayoutStackable).each(function (index, element) {
            var swiperSlide = $(element).find('.dynamic-card-layout.stackable').children().clone();
            $(swiperSlide).attr('class', 'col-md-4');
            $(swiperSlide).attr('style', '');
            $(swiperSlide).attr('style', '');
            $(element).find('.dynamic-card-stack-region').html(swiperSlide);
            if (dynamicCardlayoutStackable.length == (index + 1)) {
                EnableCarousel()
            }
        });

        function EnableCarousel() {
            $(".carousel-discover .container-custom .swiper-container").addClass("mySwiperDiscoverSpecial");
            new Swiper('.mySwiperDiscoverSpecial', {
                slidesPerView: 3,
                spaceBetween: 30,
                slidesPerGroup: 1,
                loop: false,
                loopFillGroupWithBlank: true,
                pagination: {
                    el: '.swiper-pagination',
                    clickable: true,
                },
                navigation: {
                    nextEl: '.swiper-button-next',
                    prevEl: '.swiper-button-prev',
                },
                breakpoints: {
                    320: {
                        slidesPerView: 1.2,
                        spaceBetween: 20,
                        slidesPerGroup: 1,
                        loop: false,
                        centeredSlides: true,
                        watchSlidesVisibility: true,
                        loopFillGroupWithBlank: true,
                    },
                    768: {
                        slidesPerView: 3,
                        spaceBetween: 30,
                        loop: false,
                        autoHeight: true,
                    },
                },
            });
        }

        // Dynamic card and image & text card
        $(".swiper-container.mySwiperDiscoverSpecial").each(function (index, element) {
            var itemPerRow = $(element).data("numberItem");

            var slides = $(element).find(".swiper-slide");
            if (slides.length <= itemPerRow) {
                if (slides.length <= 1) {
                    $(element).find(".swiper-button-next").addClass("d-none");
                    $(element).find(".swiper-button-prev").addClass("d-none");
                } else {
                    $(element).find(".swiper-button-next").addClass("d-md-none");
                    $(element).find(".swiper-button-prev").addClass("d-md-none");
                }
            }
        });
    }
});
$(function () {
    // Isn't design view.
    if (typeof (angular) == 'undefined') {
        $(".wraper-list-component .column-title>a").addClass("btn-view-more")
    }
});

const APP = {
  STORAGE: {
    THEME: 'theme',
    FONT_SIZE: 'font-size',
    SHOW_BG: 'show-background',
    NOTICE_CLOSE: 'notice_close',
    COOKIE_CLOSE: 'cookie_close'
  },
};
;
function createUUID() {
  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
    const r = (Math.random() * 16) | 0,
      v = c === 'x' ? r : (r & 0x3) | 0x8;
    return v.toString(16);
  });
}

function includeHTML() {
  var z, i, elmnt, file, xhttp;
  /*loop through a collection of all HTML elements:*/
  z = document.getElementsByTagName('*');
  for (i = 0; i < z.length; i++) {
    elmnt = z[i];
    /*search for elements with a certain atrribute:*/
    file = elmnt.getAttribute('include-html');
    if (file) {
      /*make an HTTP request using the attribute value as the file name:*/
      xhttp = new XMLHttpRequest();
      xhttp.onreadystatechange = function () {
        if (this.readyState === 4) {
          if (this.status === 200) {
            elmnt.innerHTML = this.responseText;
          }
          if (this.status === 404) {
            elmnt.innerHTML = 'Page not found.';
          }
          /*remove the attribute, and call this function once more:*/
          elmnt.removeAttribute('include-html');
          includeHTML();
        }
      };
      xhttp.open('GET', file, true);
      xhttp.send();
      /*exit the function:*/
      return;
    }
  }
}

function getUrlParameter(sParam) {
  const params = new URLSearchParams(window.location.search);
  return params.get(sParam);
}

function safeText(rawText) {
  return $(`<div>${rawText ?? ''}</div>`).text();
}

// transfers sessionStorage from one tab to another
var sessionStorage_transfer = function(event) {
  if(!event) { event = window.event; } // ie suq
  if(!event.newValue) return;          // do nothing if no value to work with
  if (event.key == 'getSessionStorage') {
    // another tab asked for the sessionStorage -> send it
    localStorage.setItem('sessionStorage', JSON.stringify(sessionStorage));
    // the other tab should now have it, so we're done with it.
    localStorage.removeItem('sessionStorage'); // <- could do short timeout as well.
  } else if (event.key == 'sessionStorage' && !sessionStorage.length) {
    // another tab sent data <- get it
    var data = JSON.parse(event.newValue);
    for (var key in data) {
      sessionStorage.setItem(key, data[key]);
    }
  }
  
  if (sessionStorage.getItem(APP.STORAGE.NOTICE_CLOSE) === 'true') {
    $('.notice').remove();
  }
};

// listen for changes to localStorage
if(window.addEventListener) {
  window.addEventListener("storage", sessionStorage_transfer, false);
} else {
  window.attachEvent("onstorage", sessionStorage_transfer);
};


// Ask other tabs for session storage (this is ONLY to trigger event)
if (!sessionStorage.length) {
  localStorage.setItem('getSessionStorage', 'foobar');
  localStorage.removeItem('getSessionStorage', 'foobar');
};

function setCookie(cname, cvalue, exdays) {
  const d = new Date();
  d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
  let expires = "expires="+d.toUTCString();
  document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
}

function getCookie(cname) {
  let name = cname + "=";
  let ca = document.cookie.split(';');
  for(let i = 0; i < ca.length; i++) {
    let c = ca[i];
    while (c.charAt(0) == ' ') {
      c = c.substring(1);
    }
    if (c.indexOf(name) == 0) {
      return c.substring(name.length, c.length);
    }
  }
  return "";
};
'use strict';
(function ($) {
    //header component
    $('#search-icon-mobile').on('click', function () {
        const divIcon = $(this).find('div');
        if (divIcon.hasClass('icon-search')) {
            divIcon.attr('class', 'icon-close-search-modal');
        } else if (divIcon.hasClass('icon-close-search-modal')) {
            divIcon.attr('class', 'icon-search');
        }
        $('#dropdownsearch').toggleClass('show');
        $('body').toggleClass('no-scroll');
        // $('button[data-target="#navbarNav"]').parent().toggleClass('d-none');

        setTimeout(function () {
            $('#searchboxmobile').val('');
            $('#searchboxmobile').focus();
        }, 300);
    });

    //change icon search PC
    $(".btn-search").on('click', function () {
        var iconSearch = $(this).find('div.icon-search');
        var iconCloseSearch = $(this).find('div.icon-close-search-modal');
        if (iconSearch.hasClass("icon-search")) {
            iconSearch.addClass("icon-close-search-modal");
            iconSearch.removeClass("icon-search");
        } else {
            iconCloseSearch.addClass("icon-search");
            iconCloseSearch.removeClass("icon-close-search-modal");
        }
    });

    // change icon hamburger mobile
    $(".navbar-toggler").on('click', function () {
        var iconSearch = $(this).find('div.icon-menu-hamburger');
        var iconCloseSearch = $(this).find('div.icon-close-search-modal');
        if (iconSearch.hasClass("icon-menu-hamburger")) {
            iconSearch.addClass("icon-close-search-modal");
            iconSearch.removeClass("icon-menu-hamburger");
        } else {
            iconCloseSearch.addClass("icon-menu-hamburger");
            iconCloseSearch.removeClass("icon-close-search-modal");
        }
    });

    //change icon accordion
    $(".navbar-toggler").on('click', function () {
        var iconSearch = $(this).find('div.icon-menu-hamburger');
        var iconCloseSearch = $(this).find('div.icon-close-search-modal');
        if (iconSearch.hasClass("icon-menu-hamburger")) {
            iconSearch.addClass("icon-close-search-modal");
            iconSearch.removeClass("icon-menu-hamburger");
        } else {
            iconCloseSearch.addClass("icon-menu-hamburger");
            iconCloseSearch.removeClass("icon-close-search-modal");
        }
    });

    $('#searchmodal').on('show.bs.modal', function () {
        // for search desktop modal
        if ($(window).scrollTop() === 0 && $('.notice').length > 0) {
            $('#searchmodal').css('top', '');
        } else {
            $('#searchmodal').css('top', '0');
        }

        //$('button[data-target="#searchmodal"]').find('svg').attr('class', 'icon-close-search-modal fas fa-times');
        setTimeout(function () {
            $('#searchbox').val('');
            $('#searchbox').focus();
        }, 300);
    });

    $('#searchmodal').on('hide.bs.modal', function () {
        //$('button[data-target="#searchmodal"]').find('svg').attr('class', 'icon-search fas fa-search');
    });

    $("#ModalFloorDetail").on('shown.bs.modal', function () {
        $(".modal-backdrop").addClass("custom-modal-backdrop");
    });

    $('.dropdown-menu-setting .label-switch').on('click', function (e) {
        var id = $(this).attr('for');
        var checkbox = $('#' + id);
        checkbox.trigger('click');
        // checkbox.prop("checked", !checkbox.prop("checked"));
        e.stopPropagation();
        e.preventDefault();
    });

    $('#setting-background').on('change', function () {
        if ($(this).prop('checked')) {
            localStorage.setItem('show-background', 'true');
            $('html').removeClass('no-background');
        } else {
            localStorage.setItem('show-background', 'false');
            $('html').addClass('no-background');
        }
        $('#setting-background-mobile').prop('checked', $(this).prop('checked'));
    });

    $('#setting-background-mobile').on('change', function () {
        $('#setting-background').prop('checked', $(this).prop('checked'));
        $('#setting-background').trigger('change');
    });

    $('#setting-color').on('change', function () {
        if ($(this).prop('checked') && $('#setting-dark').prop('checked')) {
            $('#setting-dark').trigger('click');
        }
        $('#setting-color-mobile').prop('checked', $(this).prop('checked'));
        if ($(this).prop('checked')) {
            $('html').addClass('monochrome');
            localStorage.setItem('theme', 'monochrome');
        } else {
            $('html').removeClass('monochrome');
            localStorage.setItem('theme', 'default');
        }
    });

    $('#setting-color-mobile').on('change', function () {
        $('#setting-color').prop('checked', $(this).prop('checked'));
        $('#setting-color').trigger('change');
    });

    $('#setting-dark').on('change', function () {
        $('#setting-dark-mobile').prop('checked', $(this).prop('checked'));

        if ($(this).prop('checked') && $('#setting-color').prop('checked')) {
            $('#setting-color').trigger('click');
        }

        // var oldLinkCss = document.getElementById('main-style');
        // var cssFile = oldLinkCss.getAttribute('href');
        // var cssOther = oldLinkCss.getAttribute('other-style');
        if ($(this).prop('checked')) {
            localStorage.setItem('theme', 'dark');
            document.getElementById('main-style').disabled = true;
            document.getElementById('dark-style').disabled = false;
        } else {
            localStorage.setItem('theme', 'default');
            document.getElementById('main-style').disabled = false;
            document.getElementById('dark-style').disabled = true;
        }

        $('header .logo img').each(function () {
            var src = $(this).attr('src');
            var othersrc = $(this).data('other-src');
            if (othersrc) {
                $(this).data('other-src', src);
                $(this).attr('src', othersrc);
            }
        });

        // var newLinkCss = document.createElement('link');
        // newLinkCss.setAttribute("rel", "stylesheet");
        // newLinkCss.setAttribute("type", "text/css");
        // newLinkCss.setAttribute("id", "main-style");
        // newLinkCss.setAttribute("other-style", cssFile);
        // newLinkCss.setAttribute("href", cssOther);

        // $('body').hide();
        // newLinkCss.onload = function () {
        //     $('body').show();
        // }

        // document.getElementsByTagName("head").item(0).replaceChild(newLinkCss, oldLinkCss);
    });

    $('#setting-dark-mobile').on('change', function () {
        $('#setting-dark').prop('checked', $(this).prop('checked'));
        $('#setting-dark').trigger('change');
    });

    // button change setting font size
    $('#btn-decrease-font, #btn-decrease-font-mobile').on('click', function (e) {
        var el = document.getElementsByTagName('html')[0];
        var style = window.getComputedStyle(el).getPropertyValue('font-size');
        var fontSize = parseFloat(style) - 1 + 'px';

        el.style.fontSize = fontSize;
        document.getElementsByTagName('body')[0].style.fontSize = fontSize;

        localStorage.setItem('font-size', fontSize);
        e.stopPropagation();
        e.preventDefault();
    });
    $('#btn-increase-font, #btn-increase-font-mobile').on('click', function (e) {
        var el = document.getElementsByTagName('html')[0];
        var style = window.getComputedStyle(el).getPropertyValue('font-size');
        var fontSize = parseFloat(style) + 1 + 'px';
        el.style.fontSize = fontSize;
        document.getElementsByTagName('body')[0].style.fontSize = fontSize;

        localStorage.setItem('font-size', fontSize);
        e.stopPropagation();
        e.preventDefault();
    });

    // radio button
    $('.custom-control .check').on('click', function () {
        $(this).parent().find('input[type=radio]').trigger('click');
    });

    // Start: Site search function
    function openSearchGoogle(keyword, type) {
        if (!keyword?.trim()) {
            return;
        }
        if (keyword.includes('site:') || keyword.includes('##')) {
            window.alert("Keywords cannot contains characters 'site:' or '##'");
            return;
        }
        keyword = encodeURIComponent(keyword);
        var url = 'https://www.google.com/search?q=' + keyword + '%20site:libguides.nus.edu.sg%20OR%20site:libfaq.nus.edu.sg%20OR%20site:nus.edu.sg/nuslibraries';
        if (type === 2)
            url = 'https://www.google.com/search?q=' + keyword + '&domains=nus.edu.sg&sitesearch=nus.edu.sg';
        window.open(url, '_blank').focus();
    }

    $('#site-search-btn').on('click', function () {

        var keyword = $('#searchbox').val();
        //if (!keyword) return;
        var type = $('#library-option').is(':checked') ? 1 : 2;

        openSearchGoogle(keyword, type);
    });

    $('#searchbox').on('keypress', function (e) {
        if (e.key == "Enter") {
            $('#site-search-btn').trigger('click');
        }
    });

    $('#btn-searh-mobile').on('click', function () {

        var keyword = $('#searchboxmobile').val();
        //if (!keyword) return;

        var type = $('#f-option').is(':checked') ? 1 : 2;

        openSearchGoogle(keyword, type);
    });

    $('#searchboxmobile').on('keypress', function (e) {
        if (e.key == "Enter") {
            $('#btn-searh-mobile').trigger('click');
        }
    });
    // End: Site search function

    $(window).on('resize', function () {
        if ($(window).width() > 1024 && $('#dropdownsearch').hasClass('show')) {
            $('#search-icon-mobile').trigger('click');
        }
    });

    // Logout button
    $('#logout-link').on('click', function (e) {
        e.preventDefault();
        var adfsLogoutUrl = $(this).attr('data-adfs-logout');
        var i = document.createElement("img");
        i.src = adfsLogoutUrl;

        location.href = $(this).attr('href');
    });

})(jQuery);
;
'use strict';
(function($){
	//navigation component
  $('.dropdown-menu .nav a.nav-link').on('mouseover', function (e) {
    var tabId = $(this).attr('aria-controls');
    var parent = $(this).parents('.dropdown-menu');
    parent
      .find('#' + tabId)
      .siblings()
      .removeClass('fade')
      .removeClass('show')
      .removeClass('active');
    parent
      .find('#' + tabId)
      .addClass('fade')
      .addClass('show')
      .addClass('active');
  });
  $('#search-library-resources').on('click', function (e) {
		if (!$('.navigation-search').hasClass('d-block')) {	
			if ($('.search-library-resources').hasClass('active')) {
				$('.search-library-resources').removeClass('active');
				$('.navigation-search').slideUp();
			}
			else {
				$('.search-library-resources').addClass('active');
				$('.navigation-search').slideDown();
			}
		}
    e.stopPropagation();
    e.preventDefault();
  });
  $('#navbarNav button.dropdown-toggle').on('click', function () {
    var parent = $(this).parents('.nav-item');
    parent.siblings().removeClass('active');
    parent.siblings().find('div[class^="icon-"]').removeClass('active');
    parent.toggleClass('active');
    $(this).find('div[class^="icon-"]').toggleClass('active');
  });
  $('#navbarNav')
  .on('show.bs.collapse', function () {
    $('body').addClass('no-scroll');
    $('button[data-target="#navbarNav"]').find('div')
				.removeClass('icon-menu-hamburger')
				.addClass('icon-close-search-modal');
    $('#search-icon-mobile').parent().addClass('d-none').removeClass('d-inline-block');
    $('#navbarNav').css({
      position: 'fixed',
      top: '50px',
      overflow: 'scroll',
    });
    $('#navbarNav .nav-item').removeClass('active');
    $('#navbarNav .nav-item').find('div[class^="icon-"]').removeClass('active');
  })
  .on('hidden.bs.collapse', function () {
    $('#CloseSearchResourceMobileBox').trigger('click');
    $('body').removeClass('no-scroll');
    $('button[data-target="#navbarNav"]').find('div')
				.removeClass('icon-close-search-modal')
				.addClass('icon-menu-hamburger');
    $('#search-icon-mobile').parent().removeClass('d-none').addClass('d-inline-block');
  });

  if ($('.header .dropdown-login .dropdown-toggle').length > 0) {
    var $loginMobile = $('#navbarNav .item-login-mobile');
    var loginText = $('.header .dropdown-login .dropdown-toggle').text().trim();
    var loginUrl = $('.header .dropdown-login .dropdown-toggle').attr('href');
    if(loginUrl === null || loginUrl === undefined)
    {
      loginUrl = '#';
    }
    else
    {
      loginUrl = loginUrl.trim();
    }
	
    $loginMobile.find('button.dropdown-toggle').html(`<div class="icon-user-login img-right-margin"></div> ` + loginText);

    $loginMobile.find('.link-item .title').html(loginText);
    $($loginMobile.find('.link-item a')[0]).attr('href', loginUrl);
    var html = '';
    $('.header .dropdown-login .dropdown-menu-login .dropdown-item').each(function() {
      if ($(this).attr("id") === "logout-link"){
        html += '<a id="logout-link-mobile" data-adfs-logout="' + $(this).attr('data-adfs-logout') + '" class="nav-link" href="' + $(this).attr('href') + '">' + $(this).text() + '</a>';
      }else{
        html += '<a class="nav-link" href="' + $(this).attr('href') + '">' + $(this).text() + '</a>';
      }
    });
    $loginMobile.find('.link-item .nav').html(html);
  }
  else {
    $loginMobile.remove();
  }
  $('#logout-link-mobile').on('click', function (e) {
    e.preventDefault();
    var adfsLogoutUrl =  $(this).attr('data-adfs-logout');
        var i = document.createElement("img");
        i.src = adfsLogoutUrl;

        location.href = $(this).attr('href');
  })

  if ($('.header .navbar .ask-us').length > 0) {
    $('#navbarNav .nav-item .ask-us').attr('href', $('.header .navbar .ask-us').attr('href'));
  }
  else {
    $('#navbarNav .nav-item .ask-us').parent().remove();
  }

  $('#SearchResourceMobile').on('click', function () {
    $('#SearchResourceMobileBox').addClass('show');
    $('.header .content .hamburger-menu button .icon-close-search-modal').css('display','none');
  })

  $('#CloseSearchResourceMobileBox').on('click', function() {
    $('#SearchResourceMobileBox').removeClass('show');
    $('#SearchResourceMobile').parents('.nav-item').removeClass('active');
    $('.header .content .hamburger-menu button .icon-close-search-modal').css('display','inline-block');
    setTimeout(function() {
      $('#searchboxresourcemobile').focus();
    },300);
  });
  
})(jQuery);;
'use strict';
(function ($) {
  $('.text-component table').each(function () {
    var html = '<div class="table-container">' + this.outerHTML + '</div>';
    $(html).insertBefore($(this));
    $(this).remove();
  });

  $('section.text-component').each(function() {
    if ($(this).parents('.container-custom').length > 0) {
      $(this).find('.container-custom').addClass('px-0');
    }
  });

})(jQuery);
;
'use strict';

function applyDatepickerInput() {
	$('.datepicker-input').each(function () {
		if (!$(this).data('DateTimePicker')) {
			$(this).datetimepicker({
				viewMode: 'months',
				format: 'MMM-YYYY',
        minDate: moment().startOf('month'),
				icons: {
					time: 'far fa-clock',
					date: 'far fa-calendar-alt',
					up: 'fas fa-chevron-up',
					down: 'fas fa-chevron-down',
					previous: 'fas fa-chevron-left',
					next: 'fas fa-chevron-right',
					today: 'fas fa-bullseye',
					clear: 'fas fa-trash',
					close: 'fas fa-times',
				}
			});

			$(this).on('click', function () {
				$(this).data('DateTimePicker').show();
			});

			$(this).on("dp.show", function() {
				$(this).data('DateTimePicker').viewMode('months');
			});
		}
	});
}

function applyDatepicker() {
	$('.datepicker')
		.datetimepicker({
			defaultDate: moment(),
			format: 'YYYY-MM-DD',
			icons: {
				time: 'far fa-clock',
				date: 'far fa-calendar-alt',
				up: 'fas fa-chevron-up',
				down: 'fas fa-chevron-down',
				previous: 'fas fa-chevron-left',
				next: 'fas fa-chevron-right',
				today: 'fas fa-bullseye',
				clear: 'fas fa-trash',
				close: 'fas fa-times',
			},
		})
		.on('dp.change', function (e) {
			let date = moment();
			if (e && e.date) {
				date = e.date;
			}
			let text = $(this).find('.text-date');

			if (moment().isSame(date, 'day')) {
				text.html('Today, ' + date.format('DD MMM, YYYY'));
			} else {
				text.html(date.format('dddd, DD MMM, YYYY'));
			}
		})
		.trigger('dp.change');

	// calendar picker
	$('.calendar-datepicker').each(function() {
		var _calendar = $(this);
		_calendar.find('.datepicker-inline')
			.each(function (index) {
				$(this).data('index', index);
				$(this)
					.datetimepicker({
						format: 'YYYY-MM-DD',
						inline: true,
						sideBySide: false,
					})
					.on('dp.change', function (e) {
						if (e.date) {
							_calendar.trigger('dateChange', moment(e.date));
							_calendar.val(moment(e.date));
							// let viewDate;
							// if ($(this).data('index') == 1) {
							// 	viewDate = e.date.add(-1, 'month');
							// } else {
							// 	viewDate = e.date.add(1, 'month');
							// }
							$(this).addClass('active');
							$(this)
								.siblings('.datepicker-inline')
								.removeClass('active')
								.data('DateTimePicker')
								// .viewDate(viewDate)
								.clear();
						}
					});

				if (index === 1) {
					var picker = $(this).data('DateTimePicker');
					var date = picker.viewDate().add(1, 'month');
					picker.viewDate(date).clear();
				} else {
					$(this).addClass('active');
					_calendar.val(moment());
				}
			});

		_calendar.find('.btn-prev-date').on('click', function () {
			_calendar.find('.datepicker-inline')
				.each(function () {
					var picker = $(this).data('DateTimePicker');
					var date = picker.viewDate().add(-1, 'month');
					picker.viewDate(date).clear();

					var selectDate = _calendar.val();
					if (date.format('YYYYMM') == selectDate.format('YYYYMM')) {
						picker.date(selectDate);
					}

				});
		});

		_calendar.find('.btn-next-date').on('click', function () {
			_calendar.find('.datepicker-inline')
				.each(function () {
					var picker = $(this).data('DateTimePicker');
					var date = picker.viewDate().add(1, 'month');
					picker.viewDate(date).clear();

					var selectDate = _calendar.val();
					if (date.format('YYYYMM') == selectDate.format('YYYYMM')) {
						picker.date(selectDate);
					}
				});
		});

		_calendar.find('.bootstrap-datetimepicker-widget thead .prev, .bootstrap-datetimepicker-widget thead .picker-switch, .calendar-datepicker .bootstrap-datetimepicker-widget thead .next')
			.on('click', function (e) {
				e.stopPropagation();
				e.preventDefault();
			});
		_calendar.find('.datepicker-days .day.old, .datepicker-days day.new').on('click', function(e) {
			e.stopPropagation();
			e.preventDefault();
		});
	});
}

(function ($) {
	moment.locale('en', {
		week: {
			dow: 1
		}
	});
	// datepicker-input  
	applyDatepickerInput();
	// datepicker
	applyDatepicker();
	// end calendar picker
})(jQuery);;
var showLoading = function () {
  if ($('.loading').length > 0) {
    return;
  }
  var html = '<section class="loading"><div class="lds-default"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></section>'
  $('body').append(html).addClass('no-scroll');
};

var hideLoading = function () {
  $(".loading").remove();
  $('body').removeClass('no-scroll');
};;
'use strict';
(function($){
	//notice component
  function countNotice() {
    let total = $('.notice .notice-content').length;
    let index = $('.notice .notice-content.active').data('index');
    if (total) {
      $('.notice .right-bar p').html('(' + index + '/' + total + ')');
    } else {
      $('.notice').remove();
    }
  }

  function setHeightNotice() {
    let $content = $('.notice .notice-content');
    let height = 0;
    $content.each(function() {
      let item = $(this);
      if (item.hasClass('active')) {
        item.attr('isactive', 'true');
      }
      else {
        item.removeAttr('isactive');
        item.addClass('active');
      }
      $content.css('height', '');

      let h = item.outerHeight();
      if (h > height) {
        height = h;
      }
      item.removeClass('active');
    });
 
    $content.css('height', height);
    if ($('.notice .notice-content[isactive=true]').length > 0) {
      $('.notice .notice-content[isactive=true]').addClass('active')
    }
    else {
      $('.notice .notice-content:first').addClass('active');
    }
  }

  //$('.notice .notice-content:first').addClass('active');
  $('.notice .btn-close-notice').on('click', function () {
    if ($('.sticky-navigation-custom').length > 0) {
      var offset = $('.sticky-navigation-custom').data('offset-x-original') - ($('.notice').height() || 0);
      $('.sticky-navigation-custom').data('offset-x-original', offset);
    }
    $('.notice').remove();
    sessionStorage.setItem(APP.STORAGE.NOTICE_CLOSE, 'true');
  });
  $('.notice #prev-notice').on('click', function () {
    let prev = $('.notice .notice-content.active').prev();
    if (prev.length === 0) {
      prev = $('.notice .notice-content:last');
    }

    prev.siblings().removeClass('active');
    prev.addClass('active');

    countNotice();
  });
  $('.notice #next-notice').on('click', function () {
    let next = $('.notice .notice-content.active').next();
    if (next.hasClass('right-bar')) {
      next = $('.notice .notice-content:first');
    }

    next.siblings().removeClass('active');
    next.addClass('active');

    countNotice();
  });

  $(window).on('resize', function() {
    setHeightNotice();
  });
  setHeightNotice();
  if (sessionStorage.getItem(APP.STORAGE.NOTICE_CLOSE) === 'true') {
    $('.notice').remove();
  }
})(jQuery);;
'use strict';
(function ($) {
	let applicationPath = $("#main").attr("data-application-path");
	if (applicationPath === '/')
		applicationPath = '';

	let currentPath = $(location).attr('pathname');
	if (currentPath === '/')
		currentPath = '';
	
	// carousel-resource
	$('.mySwiperResourceHighlights').each(function () {
		let id = 'swiper' + createUUID();
		$(this).attr('id', id);
		new Swiper('#' + id, {
			slidesPerView: 1.2,
			spaceBetween: 0,
			loop: true,
			loopFillGroupWithBlank: true,
			pagination: {
				el: '.swiper-pagination',
				clickable: true,
			},
			navigation: {
				nextEl: '.swiper-button-next',
				prevEl: '.swiper-button-prev',
			},
			breakpoints: {
				320: {
					slidesPerView: 1.15,
				},
				768: {
					slidesPerView: 2,
					spaceBetween: 40,
					slidesOffsetBefore: 5,
					centeredSlides: true,
					freeMode: true,
				},
				1024: {
					slidesPerView: 3.5,
					spaceBetween: 40,
					slidesOffsetBefore: 200,
					centeredSlides: true,
				},
			},
			on: {
				//gtag submit
                afterInit: function () {
                    $('.mySwiperResourceHighlights .swiper-slide').click(function () {
                        if(window.dataLayer) {
							let content = $(this).find('.resource-highlight-content').html();
							
                            window.dataLayer = window.dataLayer || [];
                            window.dataLayer.push({
                                'event': 'select_content',
                                'content_type': 'resource highlights_' + getCurrentPage(),
                                'content_title': content
                            });
                        }
                    });
                },
            },
		});
	});

	$('.mySwiperResourceL2Page').each(function () {
		let $this = $(this);
		let id = 'swiper' + createUUID();
		$(this).attr('id', id);
		new Swiper('#' + id, {
			spaceBetween: 0,
			loop: false,
			loopFillGroupWithBlank: true,
			centerInsufficientSlides: true,
			pagination: {
				el: '.swiper-pagination',
				clickable: true,
			},
			navigation: {
				nextEl: '.swiper-button-next',
				prevEl: '.swiper-button-prev',
			},
			breakpoints: {
				320: {
					slidesPerView: 1.15,
					slidesPerGroup: 1
				},
				768: {
					slidesPerView: 2.2,
					slidesPerGroup: 1,
					spaceBetween: 40
				},
				1024: {
					slidesPerView: 4,
					spaceBetween: 40,
					slidesPerGroup: 4
				},
			},
			on: {
				afterInit: function() {
					if ($this.find('.swiper-pagination-bullet').length > 1) {
						$this.find('.swiper-pagination').css('visibility','');
					}
					else {
						$this.find('.swiper-pagination').css('visibility','hidden');
					}
				}
			}
		});
	});

	//carousel discover
	function updateDiscoverDescriptionHeight() {
		var $discover = $('.carousel-discover');
		$discover.find('.mySwiperDiscoverSpecial .item .text').css('height', '');
		$discover.find('.row-custom .item .text').css('height', '');
		setTimeout(function () {
			var maxHeight = 0;
			$discover.find('.mySwiperDiscoverSpecial .item .text').each(function () {
				var h = $(this).outerHeight();
				if (maxHeight < h) maxHeight = h;
			});
			$discover.find('.mySwiperDiscoverSpecial .item .text').css('height', maxHeight);

			maxHeight = 0;
			$discover.find('.row-custom .item .text').each(function () {
				var h = $(this).outerHeight();
				if (maxHeight < h) maxHeight = h;
			});

			$discover.find('.row-custom .item .text').css('height', maxHeight);
		}, 100);
	}

	$('.mySwiperDiscoverSpecial').each(function () {
		let id = 'swiper' + createUUID();
		let item = $(this).data('number-item');
		$(this).attr('id', id);

		new Swiper('#' + id, {
			slidesPerView: 1.2,
			spaceBetween: 20,
			loopFillGroupWithBlank: true,
			pagination: {
				el: '.swiper-pagination',
				clickable: true,
			},
			navigation: {
				nextEl: '.swiper-button-next',
				prevEl: '.swiper-button-prev',
			},
			breakpoints: {
				320: {
					slidesPerView: 1.2,
					spaceBetween: 20,
					centeredSlides: true,
					watchSlidesVisibility: true,
				},
				768: {
					slidesPerView: item,
					spaceBetween: 30,
					centeredSlides: false,
					// autoHeight: true,
					centerInsufficientSlides: true,
				},
			},
			on: {
				init: function () {
					var $discover = $('.carousel-discover');
					$discover.find('.mySwiperDiscoverSpecial .item .text').css('height', '');
					$discover.find('.row-custom .item .text').css('height', '');

					//gtag submit
					$('.mySwiperDiscoverSpecial .swiper-slide').click(function () {
                        if(window.dataLayer) {
							let content =  $(this).find('.discover-special-title').html();
							let href = $(this).find('a').attr('href');
							
                            window.dataLayer = window.dataLayer || [];
                            window.dataLayer.push({
                                'event': 'select_content',
                                'content_type' : 'special collections _ ' + getCurrentPage(),
                                'content_title': content
                            });
                        }
                    });
				},
				afterInit: function () {
					updateDiscoverDescriptionHeight();
				},
				resize: function () {
					updateDiscoverDescriptionHeight();
				}
			}
		});
	});



	$('.mySwiperSpaces').each(function () {
		let id = 'swiper' + createUUID();
		$(this).attr('id', id);
		new Swiper('#' + id, {
			slidesPerView: 1,
			spaceBetween: 30,
			slidesPerGroup: 1,
			loopFillGroupWithBlank: true,
			navigation: {
				nextEl: '.swiper-button-next',
				prevEl: '.swiper-button-prev',
			},
			breakpoints: {
				320: {
					slidesPerView: 1.2,
					spaceBetween: 20,
					slidesPerGroup: 1,
					watchSlidesVisibility: true,
					loopFillGroupWithBlank: true,
				},
				768: {
					slidesPerView: 3,
					spaceBetween: 30,
					centerInsufficientSlides: true,
				},
			},
		});
	});

	$('.mySwiperVirtualTour').each(function () {
		let id = 'swiper' + createUUID();
		$(this).attr('id', id);
		new Swiper('#' + id, {
			slidesPerView: 1,
			spaceBetween: 0,
			slidesPerGroup: 1,
			centeredSlides: true,
			freeMode: false,
			observer: true,
			observeParents: true,
			navigation: {
				nextEl: '.swiper-button-next-unique',
				prevEl: '.swiper-button-prev-unique',
			},
		});
	});

	// opening hours
	$('.mySwiperOpeningHours').each(function () {
		let id = 'swiper' + createUUID();
		$(this).attr('id', id);
		new Swiper('#' + id, {
			slidesPerView: 1,
			spaceBetween: 20,
			slidesPerGroup: 1,
			loop: true,
			pagination: {
				el: '.swiper-pagination',
				clickable: true,
			},
		});
	});

	$(window).on('resize', function () {
		updateDiscoverDescriptionHeight();
	});

	function getCurrentPage() {
		return applicationPath === currentPath ? "home" : handleGetPageUrl();
	}

	function handleGetPageUrl() {
		let result = currentPath;
		if(applicationPath && applicationPath !== '/'){
			result = result.replace(applicationPath, '');
		}

		//trim first / character
		result = result[0] === '/' ? result.substring(1) : result;
		return result;
	}
})(jQuery);;
//scroll to header of accordion card
function scrollToHeaderAccordion() {
  $('.accordion-parent .collapse')
  .on('shown.bs.collapse', function() {
    var $this = $(this);
    setTimeout(function() {
      $('body,html').animate(
        {
          scrollTop: $this.prev().offset().top - 100, // Scroll to top of body
        },
        500
      );
    }, 150)
  });
}

'use strict';
(function($){
  scrollToHeaderAccordion();

	//table PC in central-library
  $('.list-libraries .container-custom .table tbody tr button.btn-see-more-central-library').on('click', function (e) {
    var parent = $(e.target).parent().parent();
    var getdataIdParent = $(parent).attr('data-id');

    var lastTableRow = $(parent).siblings().last();
    var lastId = $(lastTableRow).data('id') ? $(lastTableRow).data('id') : $(lastTableRow).data('libId');

    if (getdataIdParent == lastId) {
      if($(this).html().trim() == 'See More +') {
        $(parent).removeClass("border-bottom");
        $(lastTableRow).addClass("border-bottom");
      } else {
        $(parent).addClass("border-bottom");
        $(lastTableRow).removeClass("border-bottom");
      }
    } 
    else {
      var child =  $('tr[data-lib-id='+ getdataIdParent +']');
      if(child.length > 0) {
        // $(parent).toggleClass("border-bottom");
        child.last().toggleClass("border-bottom");
      }
    }

    $(parent)
      .siblings()
      .each(function (index, el) {
        var dataId = $(el).data('libId');
        if (dataId == getdataIdParent) {
          $(el).toggleClass('d-none');
        }
      });
  });

  //table mobile in central-library
  $('.btn-see-more-central-library').on('click', function () {
    if ($(this).html() == 'See More +') {
      $(this).addClass('btn-see-less');
      $(this).html('See Less -');
    } else {
      $(this).removeClass('btn-see-less');
      $(this).html('See More +');
    }
  });

  $('.btn-see-more-mobile').on('click', function (e) {
    var parent = $(e.target).parent();
    var getdataIdParent = $(parent).data('id');
    $(parent)
      .siblings()
      .each(function (index, el) {
        var dataId = $(el).data('libId');
        if (dataId == getdataIdParent) {
          $(el).toggleClass('d-none');
        }
      });
  });

	var $tableMobile = $('.list-library-mobile');
	$tableMobile.find('.collapse.show').each(function() {
		$(this).prev().find('span').html('-');
	});

	$tableMobile.find('.collapse')
	.on('show.bs.collapse', function() {
		$(this).prev().find('span').html('-');
	})
	.on('hidden.bs.collapse', function() {
		$(this).prev().find('span').html('+');
	});
})(jQuery);;
'use strict';
(function ($) {
  // return to top
  $('#return-to-top').on('click', function () {
    // When arrow is clicked
    $('body,html').animate(
      {
        scrollTop: 0, // Scroll to top of body
      },
      1000
    );
  });
  
  // var str = $(".datepicker .container-custom .bootstrap-datetimepicker-widget .datepicker table.table-condensed thead tr th.dow");
  // if(str.text().length > 1) {
  //   str.text(str.text().substr(0,1));
  // }
  $('.card-header').on('click', function () {
    let card = $(this).find(".icon-for-accordion");
    if (!card.hasClass('icon-less'))
      $(this).parents('.card').siblings().find('div.icon-for-accordion').removeClass('icon-less');

    $(this).find(".icon-for-accordion").toggleClass('icon-less');
  });

  // var str = $(".datepicker .container-custom .bootstrap-datetimepicker-widget .datepicker table.table-condensed thead tr th.dow");
  // if(str.text().length > 1) {
  //   str.text(str.text().substr(0,1));
  // }

  $('.btn-toggle-modal').on('click', function () {
    if ($('.modal-floor-detail').hasClass('show')) {
      // $(".modal-backdrop").css("opacity","0.5");
    }
  });

  $(window).on('resize', function () {
    let width = $(window).width();

    /*const pageHeaderTitleHeight = $('.page-header .page-header-content .header-title p').height();
    $('.page-header .page-header-border').height(pageHeaderTitleHeight + 80);*/

    if (width > 1025) {
      let el = document.getElementById('navbarNav');
      let display = window.getComputedStyle(el).getPropertyValue('display');

      if (display === 'block') {
        $('button[data-target="#navbarNav"]').trigger('click');
      }
    }
    
    setMarginLibraryIntroduction();
    setStickyDropdown();
    setWidthPageHeaderBg();
    setStickyMicrosite();
    setSizeImageNewMicrosite();
    setWidthSideNav();
  });

  $(window).on('load', function () {

    setStickyDropdown();
    loadStickyMenu();
    setWidthPageHeaderBg();
    setStickyMicrosite();
    setSizeImageNewMicrosite();
    setWidthSideNav();
    checkShowCookieNoti();
    /*const pageHeaderTitleHeight = $('.page-header .page-header-content .header-title p').height();
    $('.page-header .page-header-border').height(pageHeaderTitleHeight + 80);*/
  });

  var setWidthSideNav = function () {
    var w = $('.side-navigation--col').width();
    $('.comp__side-navigation').css("width", w);
  };

  var setSizeImageNewMicrosite = function () {
    var getElement = $('.static-banner-microsite-type-2 .container-custom .banner-tab');
    var contWid = $('.static-banner-microsite-type-2 .container-custom').outerWidth();
    var winWid = $(window).width();
    var remainWid = (winWid - contWid) / 2 + 16;
    $(getElement[0]).css("width", `calc(100% + ${remainWid}px)`);
  };

  var setMarginLibraryIntroduction = function () {
    var getElement = $('.breadcrumb-opening-hours');
    var getHeightBreadcrumb = $(getElement[0]).innerHeight();
    $('.library-introduction').css('margin-top', -getHeightBreadcrumb);
  };

  var setStickyDropdown = function () {
    if ($('.sticky-navigation').length === 0) {
      return;
    }
    if ($(window).outerWidth() < 768) {
      $('.sticky-navigation').addClass('sticky-navigation-custom');
      var offset = $('.sticky-navigation').offset().top;
      $('.sticky-navigation').data('offset-x-original', offset);
    } else {
      $('.sticky-navigation').removeClass('sticky-navigation-custom');
      $('.sticky-navigation').css('top', '');
      $('.sticky-navigation').find(".container-custom").css("padding","");
      $('.sticky-navigation').find(".dropdown").css("width",'');
      $('.sticky-navigation').find(".dropdown").css("border-radius","");
      $('.sticky-navigation').find(".dropdown button").css("border-radius","");
    }

    var getElement = $('.header');
    var getHeightHeader = $(getElement[0]).innerHeight();
    var offset = $('.sticky-navigation-custom').data('offset-x-original');
    var windowScrollTop = $(window).scrollTop();
    if ($('.sticky-navigation-custom').length === 0) {
      let offsetRight = ($(window).width() - 1190)/2;
      offsetRight = offsetRight > 0 ? offsetRight : '';
      $('.sticky-navigation').css({'top': getHeightHeader + 20, 'right': offsetRight});
    };
    if (offset - 61 < windowScrollTop) {
      $('.sticky-navigation-custom').css('top', getHeightHeader - 20);
      $('.sticky-navigation-custom').find(".container-custom").css("padding","0");
      $('.sticky-navigation-custom').find(".dropdown").css("width","100%");
      $('.sticky-navigation-custom').find(".dropdown").css("border-radius","0px");
      $('.sticky-navigation-custom').find(".dropdown button").css("border-radius","0px");
    }
    else {
      $('.sticky-navigation-custom').css('top', '');
      $('.sticky-navigation-custom').find(".container-custom").css("padding","");
      $('.sticky-navigation-custom').find(".dropdown").css("width",'');
      $('.sticky-navigation-custom').find(".dropdown").css("border-radius","");
      $('.sticky-navigation-custom').find(".dropdown button").css("border-radius","");
    }
  };

  var setStickyMicrosite = function () {
    if ($('.comp__side-navigation.fixed-navigation').length === 0) {
      return;
    }

    var getElement = $('.header');
    var getHeightHeader = $(getElement[0]).innerHeight();
    $('.comp__side-navigation.fixed-navigation').css("top", getHeightHeader - 30);
  };

  var setWidthPageHeaderBg = function () {
    var $pageHeader = $('.page-header');

    var wContent = $pageHeader.find('h1').width();
    var wContainer = $pageHeader.find('.container-custom').width();
    var wWindow = $pageHeader.find('.container-custom').outerWidth(true);
    var marginLeft = (wWindow - wContainer) / 2;
    if (marginLeft === 15) wContent += 50;
    $pageHeader.find('.page-header-bg').css('width', wContent + marginLeft * 2);
  }
  setWidthPageHeaderBg();
  setMarginLibraryIntroduction();

  var loadStickyMenu = function() {
    var stickyMenu = $('.sticky-navigation');
    if (stickyMenu.length > 0) {
      if ($('.page-header-no-sticky-navigation').length > 0) {
        $('.page-header-no-sticky-navigation').removeClass('page-header-no-sticky-navigation');
      }
      stickyMenu.find('.dropdown-menu').html('');
      var html = '<a class="dropdown-item" href="javascript:;" data-menu-id="' + 'i' + createUUID() + '">' + 'Go to section' + '</a>';
      $('.sticky-navigation-item').each(function() {
        var id = 'i' + createUUID();
        $(this).attr('id', id);
        html += '<a class="dropdown-item" href="javascript:;" data-menu-id="' + id + '">' + $(this).html() + '</a>';
      });

      stickyMenu.find('.dropdown-menu').html(html);

      stickyMenu.find('.dropdown-menu a.dropdown-item').on('click', function() {
        var menu = $('#' + $(this).data('menu-id'));
        $('body,html').animate(
          {
            scrollTop: menu.offset()? menu.offset().top - 150: 0, // Scroll to top of body
          },
          500
        );
      });
    }
  };

  var detectScrollToView = function() {   
    var wH = $(window).height();
    var wS = $(window).scrollTop();
    const fistSticky = $('.sticky-navigation-item').first().offset()? $('.sticky-navigation-item').first().offset().top : 0;

    $('.sticky-navigation-item').each(function() {
      var hT = $(this).offset().top + wH - 300;
      var hH = $(this).outerHeight();
      if (wS > (hT+hH-wH)){
        $('.sticky-navigation').find('.dropdown-toggle span').html($(this).html());
      }
      if (wS < fistSticky - 300) {
        $('.sticky-navigation').find('.dropdown-toggle span').html('Go to section');
      }
    });
  };
  

  $(window).on('scroll', function () {
    setStickyDropdown();
    detectScrollToView();
    setStickyMicrosite();
    // for click to top button
    if ($(this).scrollTop() > 100) {
      $('#return-to-top').fadeIn('slow');
      $('nav').addClass('nav-hide');
    } else {
      $('#return-to-top').fadeOut('slow');
      $('nav').removeClass('nav-hide');
    }
  });

  $(function () {
    $('.icon-information[title]').tooltip({
      template: `<div class="have-tooltip"><div class="tool-tip"><p class="tooltip-inner border-none"></p></div></div>`
    });
  });

  $('.cookies .btn.btn-common').on('click', function() {
    setCookie(APP.STORAGE.COOKIE_CLOSE, 'true', 365);
    $('.cookies').remove();
  });

  var checkShowCookieNoti = function() {
    var closed = getCookie(APP.STORAGE.COOKIE_CLOSE);
    if (closed === 'true') {
      $('.cookies').remove();
    }
    else {
      $('.cookies').addClass('d-block');
    }
  }
  
})(jQuery);
;
'use strict';
(function() {
    var setHeightOfEventTile = function() {
        $('.event-tile img').each(function() {
            var w = $(this).width();
            var h = 244*w/356;

            $(this).css('height', h);
        });
    };

    setHeightOfEventTile();

    $(window).on('load', function() {
        setHeightOfEventTile();
    }).on('resize', function() {
        setHeightOfEventTile();
    });
})(jQuery);;
function registerFacilityAccordion() {
  $('.facility-listing .collapse')
  .on('shown.bs.collapse', function() {
    var $this = $(this);
    setTimeout(function() {
      $('body,html').animate(
        {
          scrollTop: $this.prev().offset().top - 100, // Scroll to top of body
        },
        500
      );
    }, 150)
    
  });
  
}

'use strict';
(function ($) {
  $(window).on('load', function () {
    includeHTML();
    setWidthOfCarouselCaption();
  });

  /* Start carousel_banner component */
  $('.carousel-banner').each(function() {
    let id = 'carousel' + createUUID();
    let speed = $(this).data('speed') || 4000;
    let autoplay = $(this).data('autoplay') !== false;
		$(this).attr('id', id);
    $('#' + id).slick({
      dots: true,
      infinite: true,
      slidesToShow: 1,
      slidesToScroll: 1,
      arrows: false,
      autoplay: autoplay,
      autoplaySpeed: speed,
      responsive: [
        {
          breakpoint: 992,
          settings: {
            dots: true,
          },
        },
      ],
    });
  });
  /* End carousel_banner component */

  /* Start slider component */
  $('.bg-image-slider').slick({
    dots: true,
    infinite: true,
    variableWidth: true,
    arrows: true,
  });
  /* End slider component */

  function setWidthOfCarouselCaption() {
    var $banner = $('.comp__carousel-banner');
    if ($banner.length === 0) return;

    var ww = $(window).outerWidth();

    if (ww < 992) {
      $banner.find('.carousel-banner__caption').css('max-width', '95%');  
      return;
    }

    var paddingLeft = (ww - $banner.find('.container-custom').outerWidth()) / 2;
    
    var wc = $banner.find('.carousel-banner').outerWidth();
    var maxWidth = ww - wc - paddingLeft - 20 - 15;

    $banner.find('.carousel-banner__caption').css('max-width', maxWidth);
  }

  /* Start side_navigation component */

  var _side_navi = $('.comp__side-navigation');
  _side_navi.parents('.row').addClass('side-navigation--row');
  _side_navi.parents('.col').addClass('side-navigation--col');
  
  var _side_navi_height = $(".microsite-container").height() - 100;

  $(window).scroll(function () {
    var _banner_height = 100;
    if ($('.comp__carousel-banner').length > 0) {
      _banner_height += $('.comp__carousel-banner').height();
    }
    var _reach_footer = $(".footer").position().top - ($(".side-navigation__list").height() + 200 );
    var _in_footer = _reach_footer + 50;
    if($(window).width() > 1200){
      _banner_height += 100;
    }
    if ($(window).width() < 767) {
      _banner_height += 100;
    } 
    _banner_height += ($(".notice").height() || 0);
    _banner_height += ($('.resource-search').outerHeight() || 0);
    if($(window).width() >= 767){
      if ($(this).scrollTop() >= _banner_height && $(this).scrollTop() < _reach_footer) {
        // console.log("out of micro");
        _side_navi.addClass('fixed-navigation');
        _side_navi.parents(".side-navigation--col").removeClass('side-navi-onscroll');
      }
      else if($(this).scrollTop() >= _in_footer ){
        // console.log("into footer");
        // console.log($(this).scrollTop())
        // console.log(_reach_footer)
        _side_navi.removeClass('fixed-navigation');
        _side_navi.parents(".side-navigation--col").addClass('side-navi-onscroll');
      }
      else if($(this).scrollTop() < _banner_height ){
        _side_navi.removeClass('fixed-navigation');
        _side_navi.parents(".side-navigation--col").removeClass('side-navi-onscroll');
      }
    }
    else{
      if ($(this).scrollTop() >= _banner_height) {
        // console.log("out of micro");
        _side_navi.addClass('fixed-navigation');
      }
      else if($(this).scrollTop() < _banner_height ){
        _side_navi.removeClass('fixed-navigation');
      }
    }
  });


  var _side_navi_list = _side_navi.find('.side-navigation__list');
  var _max_height = 200;
  _side_navi_list.css('max-height', `calc(100vh - ${_max_height}px)`);
  /* End side_navigation component */

    /* Start Slide Toggle component */
    function toggleFilterBtns() {
      if ( $(window).width() >= 768 ){
          $("#wrapper").addClass("toggled");
          $(".btn-filter").addClass("hidden");
  
          $('#menu-toggle').click(function (e) {
            e.preventDefault();
            $(this).css('display', 'none');
            $('#wrapper').toggleClass('toggled');
          });
    
          $('.btn-close').click(function (e) {
            e.preventDefault();
            $('#wrapper').toggleClass('toggled');
            setTimeout(function(){
              $('#menu-toggle').css('display', 'block');
            },200);
          });
      } else {
          $('#menu-toggle').click(function (e) {
            e.preventDefault();
            $('#wrapper').toggleClass('toggled');
          });
  
          $('.btn-close').click(function (e) {
            e.preventDefault();
            $('#wrapper').toggleClass('toggled');
          });
  
          $("#wrapper").removeClass("toggled");
      }
    }
    toggleFilterBtns();
    setWidthOfCarouselCaption();
    /* End Slide Toggle component */
  
    /* Start Breadcrumb and Title component */
    function yellowBgEx() {
      var winWid = $(window).width();
      var innTitleBgHt = $('.inner-title-bg').outerHeight();
      var contWid = $('.container-custom').outerWidth();
      var remainWid = (winWid - contWid) / 2 + 16;
      var btnFixedFilter = $('.fixed-btn-filter');
  
      $('.inner-title-bg-ex').css('height', innTitleBgHt);
      $('.inner-title-bg-ex').css('width', remainWid);
      //$('.inner-title-bg-ex').css('left', -remainWid + 20);
      $('.inner-title-bg-right').css('height', innTitleBgHt);
      $('.inner-title-bg-right').css('width', remainWid);
      if ($(window).width() >= 768) {
        $(btnFixedFilter).css('right', remainWid - 35);
      }
      if ($(window).width() >= 576 && $(window).width() <= 767) {
        $(btnFixedFilter).css('width', contWid - 30);
        $(btnFixedFilter).css('left', remainWid - 35);
      }
    }
    yellowBgEx();
    /* End Breadcrumb and Title component */
  
  
    function calFilterPos() {
      var winHt = $(window).height();
      var noticeHt = $('.notice').outerHeight() || 0;
      var headerHt = $('.header').outerHeight();
      var navHt = $('.navigation').outerHeight();
      
      var totalHeadHt = noticeHt + headerHt + navHt;
      var filterHt = winHt - totalHeadHt;
      var navSerHt;
      
      $('.filter-wrapper').css('top', totalHeadHt);
      $('.filter-wrapper').css('height', filterHt);

      $('.btn-close-notice').click(function(){
        if($(window).width() < 768) {
          $('.filter-wrapper').css('top', headerHt);
          $('.filter-wrapper').css('height', winHt);
        } else {
          $('.filter-wrapper').css('top', headerHt + navHt);
          $('.filter-wrapper').css('height', winHt);
        }
      })

      $('#search-library-resources').click(function(){
        if( $('.search-library-resources').hasClass('active') ) {
          $('.filter-wrapper').slideDown('fast');
          setTimeout(function(){
            navSerHt = $('.navigation-search').outerHeight();
            $('.filter-wrapper').css('top', totalHeadHt + navSerHt );
            $('.filter-wrapper').css('height', filterHt - navSerHt );
          }, 400);
          
        } else {
          navSerHt = 0;
          setTimeout(function(){
            $('.filter-wrapper').css('top', totalHeadHt );
            $('.filter-wrapper').css('height', filterHt );
          }, 300);
        }
      });
    }
    calFilterPos();
  
    $(window).scroll(function() {
      var winHt = $(window).height();
      var noticeHt = $('.notice').outerHeight() || 0;
      var headerHt = $('.header').outerHeight();
      var navHt = $('.navigation').outerHeight();
      
      var curHeadHt, curFilterHt;
      var totalHeadHt = noticeHt + headerHt + navHt;
      var filterHt = winHt - totalHeadHt;
      var navSerHt = $('.navigation-search').outerHeight();
  
      var scrollYpos = $(document).scrollTop();

      if( $('.search-library-resources').hasClass('active') ) {
        navSerHt = navSerHt;
      } else {
        navSerHt = 0;
      }
      
      if (scrollYpos > 0) {
        if( $('.search-library-resources').hasClass('active') ) {
          curHeadHt = (totalHeadHt + navSerHt) - scrollYpos;
          curFilterHt = filterHt + scrollYpos - navSerHt;

          $('.filter-wrapper').css('top', curHeadHt);
          $('.filter-wrapper').css('height', curFilterHt );
        } else {
          curHeadHt = totalHeadHt - scrollYpos;
          curFilterHt = filterHt + scrollYpos;

          $('.filter-wrapper').css('top', curHeadHt);
          $('.filter-wrapper').css('height', curFilterHt );
        }
      }
  
      function fixFilter() {
        $('.filter-wrapper').css('top', headerHt );
        $('.filter-wrapper').css('height', winHt - headerHt);

        $('.sticky-filter').removeClass('nFixed');
        $('.sticky-filter').addClass('fixed-filter');
  
        if ( $('.sticky-filter').hasClass('fixed-filter') ) {
          if($(window).width() > 768) {
            $('.sticky-filter.fixed-filter').css('top', headerHt);
          } else {
            $('.sticky-filter.fixed-filter').css('top', headerHt);
          }
        }
  
        if($(window).width() > 1200 ) {
          if ( $('.sticky-filter').hasClass('fixed-filter') && $('#wrapper').hasClass('toggled') ) {
            $('.sticky-filter').css('width', '66.3%');
          }        
        }

        if ( $('.sticky-filter').hasClass('fixed-filter') ) {
            $('.sticky-filter').css('width', '100%');
        }
  
        // if($(window).width() > 1450 ) {
        //   if ( $('.sticky-filter').hasClass('fixed-filter') ) {
        //     $('.sticky-filter').css('width', '100%');
        //   }
        // }
        // if($(window).width() < 1450 ) {
        //   if ( $('.sticky-filter').hasClass('fixed-filter') ) {
        //     $('.sticky-filter').css('width', '100%');
        //   }
        // }
      }
  
      function nFixFil() {
        $('.sticky-filter').removeClass('fixed-filter');
        $('.sticky-filter').addClass('nFixed');
  
        if ( $('.sticky-filter').hasClass('nFixed') )  {
          $('.sticky-filter').css('top', '-185px');
          $('.sticky-filter').css('width', 'auto');
        }

      }

      if($(window).width() > 768) {
          if ($(this).scrollTop() >= headerHt + navHt + navSerHt) {
            fixFilter();
          } else {
            nFixFil();
          }
      } else {
        if ($(this).scrollTop() >= headerHt + noticeHt + 75) {
          fixFilter();
        } else {
          nFixFil();
        }
      }
    });

    
    
    var checkall = document.getElementById('selAll');
    if (checkall != null) {
      var checkboxes = document.querySelectorAll('input.subOption');
      for(var i=0; i<checkboxes.length; i++) {
        checkboxes[i].onclick = function() {
          var checkedCount = document.querySelectorAll('input.subOption:checked').length;

          checkall.checked = checkedCount > 0;
          checkall.indeterminate = checkedCount > 0 && checkedCount < checkboxes.length;
        }
      }

      checkall.onclick = function() {
        var checkboxes = document.querySelectorAll('input.subOption');
        for(var i=0; i<checkboxes.length; i++) {
          checkboxes[i].checked = this.checked;
        }
      }
    }

    // if ( $('#setting-dark').prop('checked', true) ) {
    //   $('body').addClass('dark-mode');
    // }
    // else {
    //   $('body').removeClass('dark-mode');
    // }
 
    // $("#setting-dark").on('change', function() {
    //     if ($(this).is(':checked')) {
    //         $('body').addClass('dark-mode');
    //     }
    //     else {
    //       $('body').removeClass('dark-mode');
    //     }
    // });
  
    /* Start Facility Image Slider component */
    $('.facility-slider').slick();
    $('#facilitiesExample, .btn-close').click(function () {
      setTimeout(function () {
        $('.facility-slider').slick('refresh');
      }, 500);
    });
    /* End Facility Image Slider component */

    /* facility-accordion */
    registerFacilityAccordion();
    /* end facility-accordion */

    /* Start Tiles Component */
    
    // if($('.comp_tile').length > 0){
    //   _reload_tile();
    // }
  
    // $(".tile--list-loadmore").click(function(){
    //   var _clicked_tile = $(this).parents(".comp_tile");
    //   _matchHeight_tile(_clicked_tile);
    //   _backstretch_tile(_clicked_tile);
    //   $(this).parents(".comp_tile").find(".tile--list").show();
    //   $(this).hide();
    // })

    // $(".tab-nav .nav-item").click(function(){
    //   setTimeout(function(){
    //     _reload_tile();
    //   },300)
    // })
   
    
    function _reload_tile(){
      var _comp_tile = $('.comp_tile');
      _comp_tile.each(function(){
        var _tile_list = $(this).find(".tile--list");

        _matchHeight_tile($(this));
  
        _backstretch_tile($(this));

        for (var j=0; j< _tile_list.length; j++){
          if(j >= 6){
            _tile_list.eq(j).hide();
          }
        }
        $(this).find(".tile--list-loadmore").show();
      })
    }

    function _matchHeight_tile(comp){
      comp.find('.tile--list-header').matchHeight();
      comp.find('.tile--list-desc').matchHeight();
    }

    function _backstretch_tile(comp){
      var _tile_list = comp.find(".tile--list");
      var _tile_img = comp.find(".tile--list-img");

      for (var i=0; i< _tile_list.length; i++){
          var image_path = _tile_img.eq(i).attr("src-path");
          _tile_img.eq(i).backstretch(image_path);

      }
    }

    $(".button--view-past").click(function(){
      var target = "#pills-archive";
      $('a[href="' + target + '"]').click();
      $('html, body').animate({
          scrollTop: ($(".tab-nav").offset().top - 100 )
      }, 200);
    })
    /* End Tiles Component */

    /* Start Banner Component */
    if($(".comp_banner").length > 0){
      var _banner = $(".comp_banner");
      var _banner_img = _banner.find(".banner-img");
      var _banner_img_path = _banner_img.attr("src-path");
      _banner_img.backstretch(_banner_img_path);
    }
    /* End Banner Component */

    // function stickyEPanel() {
    //   var noticeHt = $('.notice').outerHeight() || 0;
    //   var headerHt = $('.header').outerHeight();
    //   var navHt = $('.navigation').outerHeight();

    //   var totalHeadHt = noticeHt + headerHt + navHt;
    //   var navSerHt = $('.navigation-search').outerHeight();
    
    //   $(window).scroll(function() {
    //     var ePanel = $('.email-optns-panel');
    //     var scrollYpos = $(document).scrollTop();

    //     if( $('.search-library-resources').hasClass('active') ){
    //       if (scrollYpos > totalHeadHt + navSerHt) {
    //         ePanel.css('top', headerHt);
    //         ePanel.addClass("fixed-panel");
    //       } else {
    //         ePanel.removeClass("fixed-panel");
    //       }
    //     } else {
    //       if (scrollYpos > totalHeadHt) {
    //         ePanel.css('top', headerHt);
    //         ePanel.addClass("fixed-panel");
    //       } else {
    //         ePanel.removeClass("fixed-panel");
    //       }
    //     }
    //   });

    //   $('.btn-close-notice').click(function(){
    //     $(window).scroll(function() {
    //       var ePanel = $('.email-optns-panel');
    //       var scrollYpos = $(document).scrollTop();

    //       if( $('.search-library-resources').hasClass('active') ){
    //         if (scrollYpos > totalHeadHt + navSerHt) {
    //           ePanel.css('top', headerHt);
    //           ePanel.addClass("fixed-panel");
    //         } else {
    //           ePanel.removeClass("fixed-panel");
    //         }
    //       } else {
    //         if (scrollYpos > totalHeadHt) {
    //           ePanel.css('top', headerHt);
    //           ePanel.addClass("fixed-panel");
    //         } else {
    //           ePanel.removeClass("fixed-panel");
    //         }
    //       }
    //     });
    //   })
    // }

    // stickyEPanel();

    // $( window ).resize(function() {
    //   stickyEPanel();
    // });

    $('.email input[type="checkbox"]').click(function(){
      var numberOfChecked = $('.email input:checkbox:checked').length;
      if ( numberOfChecked <= 2 ) {
        $('.btn-m-del').addClass('hidden'); 
      } else {
        $('.btn-m-del').removeClass('hidden'); 
      }
    });


    function showEventFilter() {
      if (!$('.dropdown-events').hasClass('show')) {
        $('.dropdown-events').addClass('show');
        $('.dropdown-menu-events').addClass('show');
      }
      
    }
    function hideEventFilter() {
      if ($('.dropdown-events').hasClass('show')) {
        $('.dropdown-events').removeClass('show');
        $('.dropdown-menu-events').removeClass('show');
      }
    }

    $('.whats-on-tab .nav-item .nav-link').on('click', function (e) {
      if ($(this).hasClass('nav-link-events')) {
        if (!$(this).parent().hasClass('dropdown-events')) {
          $(this).parent()
            .addClass('dropdown')
            .addClass('dropdown-events')
            .addClass('mt-0')
            .addClass('bg-none');
        }
        else {
          if ($('.dropdown-menu-events').hasClass('show')) {
            hideEventFilter();
          }
          else {
            showEventFilter();
          }
        }
      }
      else {
        hideEventFilter();
        $('.nav-link-events').parent()
          .removeClass('dropdown')
          .removeClass('dropdown-events')
          .removeClass('mt-0')
          .removeClass('bg-none');
      }
    });

    $('.whats-on-tab .btn-clear-event-filter').on('click', function (e) {
      $('.whats-on-tab .filterCat input[type=checkbox]').each(function() {
        $(this).prop('checked', false);
      });
    });

    $('.whats-on-tab .btn-apply-event-filter').on('click', function (e) {
      hideEventFilter();
    });

    $(window).on('click', function(e) {
      if ($(e.target).hasClass('nav-event') || $(e.target).parents('.nav-event').length > 0) {

      }
      else {
        hideEventFilter();
      }
    });

    function updateTagEvent() {
      $('.comp_tile .tile--list-tag:first').each(function() {
        var w = $(this).innerWidth();
        var iw = 0;
        var row = 1;
        $(this).find('span').removeClass('d-none');
        $(this).find('span').each(function() {
          if (row > 2) {
            $(this).addClass('d-none');
          }
          else {
            iw += $(this).outerWidth() + 7;
            
            if (iw > w) {
              row += 1;
              iw = $(this).outerWidth() + 7;
              if (row > 2) {
                $(this).addClass('d-none');
              }
            }
          }
        })
      });
    }
    updateTagEvent();
    $(window).on('resize', function() {
      toggleFilterBtns();
      setWidthOfCarouselCaption();
      
      yellowBgEx();
      updateTagEvent();
    }).on('load', function() {
      yellowBgEx();
      updateTagEvent();
    });

})(jQuery);;
'use strict';
(function($){
	// post login: show content account activities
  $('.block-content-activities .block-content').hide();
  $('.account-activities .btn-show-content').on('click', function (e) {
    e.preventDefault();
    $('.account-activities .account-item').removeClass('tab-active');
    //var accParent = $(this).parent().parent();
    $(this).addClass('tab-active');

    $('.block-content-activities .block-content').hide();

    $('.block-content-activities').slideDown('fast');
    $('.wraper-user').addClass('active-bg');
    $($(this).attr('data-link')).show();
  });

  $('.btn-close').on('click', function () {
    $('.block-content-activities').slideUp('fast');
    $('.wraper-user').removeClass('active-bg');
    $('.account-activities .account-item').removeClass('tab-active');
  });

  // post login: show content account activities mobile
  $('.acc-child > .account-item').on('click', function (event) {
    event.preventDefault();
    $(this).addClass('tab-active');
    $(this).siblings('.block-content').slideDown(200);
  });
  $('.btn-close-mobile').on('click', function () {
    $('.acc-child > .account-item').removeClass('tab-active');
    $(this).parent().slideUp(200);
    $('#block-borrow').css('display', 'none');
  });
  // post login: checkbox category
  var expanded = false;
  $('.selectBox').on('click', function () {
    var parentCheckbox = $(this).parent().parent();
    if (!expanded) {
      parentCheckbox.find('.checkboxes').slideDown('slow');
      expanded = true;
    } else {
      parentCheckbox.find('.checkboxes').slideUp('fast');
      expanded = false;
    }
  });
  $('.btn-save').on('click', function (e) {
    e.preventDefault();
    $('.checkboxes').slideUp('fast');
    expanded = false;
  });
  // popup dashboard user

	$('.form-add-subject input').on('keyup', function () {
    var currentNumberItem = $(this).data('current-number-item');
    var maxItem = $(this).data('max-item');
    var newItems = $(this).val().replace(/;/g, ',').split(',').filter(function (x) { return x.trim() !== ''; }) || [];
    newItems = newItems.map(x => x.trim())
    var oldItems = $(this).data('currentTags').replace(/;/g, ',').split(',').filter(function (x) { return x.trim() !== ''; }) || [];

    $('.form-add-subject button').prop('disabled', currentNumberItem + newItems.length > maxItem);

    // Logic for show error label.
    if (currentNumberItem + newItems.length > maxItem) {
      let msg = $(this).data('maximumError');
      $("#lbl-tag-btn-error").html(msg);
      $("#lbl-tag-btn-error").removeClass("d-none");
      $('.form-add-subject button').prop('disabled', true);
    } else if (checkIfDuplicateExists(newItems.concat(oldItems))) {
        let msg = $(this).data('duplicateError');
        $("#lbl-tag-btn-error").html(msg);
        $("#lbl-tag-btn-error").removeClass("d-none");
        $('.form-add-subject button').prop('disabled', true);
    }
    else {
        $("#lbl-tag-btn-error").addClass("d-none");
        $('.form-add-subject button').prop('disabled', false);
    }
	})

  function checkIfDuplicateExists(w) {
    return new Set(w).size !== w.length
  }


  $('.btn-unsubscribe').on('click', function (e) {
    $('.popup-dashboard-user').addClass('show-popup');
    e.stopPropagation();
  });
  $(document).on('click', function (e) {
    if ($(e.target).is('.popup-dashboard-user, .btn-unsubscribe') === false) {
      $('.popup-dashboard-user').removeClass('show-popup');
    }
  });
  $('.btn-close-popup').on('click', function () {
    $('.popup-dashboard-user').removeClass('show-popup');
  });
})(jQuery);;
'use strict';
(function($){
  const type = getUrlParameter("type") === 'ync' ? 'ync' : 'nus';
  const nextElArticle = $(".request-article-item.item-0").clone();
  const nextElBook = $(".request-book-item.item-0").clone();
  const nextElMedia = $(`.request-media-${type} .request-media-item.item-0`).clone();
  const nextElJournal = $(`.request-journal-${type} .request-journal-item.item-0`).clone();
  const nextElIntra = $(".request-intra-item.item-0").clone();

  // valid accessing
  function disabledAccessing(userRoles, matrixAccess) {
    let isDisabled = true;
    userRoles.forEach(roleId => {
        matrixAccess.forEach(rl => {
            if (rl == roleId) {
                isDisabled = false;
                return isDisabled;
            }
        });
    });
    return isDisabled;
  }

  function validMatrixAccessing(requestForm) {
      const userRoles = $('.form-content').data('roles');
      const matrixobj = $('.form-content').data('matrixobj');
      if (typeof (userRoles) !== "undefined" && userRoles !== null && typeof (matrixobj) !== "undefined" && matrixobj !== null) {
          let isDisabled = false;
          switch (requestForm) {
              case 'request-article':
                if($('.request-article').length > 0){
                  isDisabled = disabledAccessing(userRoles, matrixobj.Articles);
                }
                break;
              case 'request-book':
                  if (disabledAccessing(userRoles, matrixobj.PurchaseBooks) && disabledAccessing(userRoles, matrixobj.InterlibraryLoans)) {
                      isDisabled = true;
                  } else if (disabledAccessing(userRoles, matrixobj.InterlibraryLoans)) {
                      // disable access InterlibraryLoans
                  } else if (disabledAccessing(userRoles, matrixobj.PurchaseBooks)) {
                      // show access InterlibraryLoans
                  }
                  break;
              case 'request-media':
                  isDisabled = disabledAccessing(userRoles, matrixobj.PurchaseMedia);
                  break;
              case 'request-journal':
                  isDisabled = disabledAccessing(userRoles, matrixobj.PurchaseJournalsDatabases);
                  break;
              case 'request-intra':
                  isDisabled = disabledAccessing(userRoles, matrixobj.IntralibraryLoans);
                  break;
              default:
                  break;
          }

          if (isDisabled == true) {
              $('.' + requestForm).addClass("eform-disabled-accessing");
              $('.declaration-confirm').addClass("eform-disabled-accessing");
              $('.form-action').addClass("eform-disabled-accessing");
          } else {
              $('.' + requestForm).removeClass("eform-disabled-accessing");
              $('.declaration-confirm').removeClass("eform-disabled-accessing");
              $('.form-action').removeClass("eform-disabled-accessing");
          }
      }
  }

  $('.request-for-item').on('click', function () {
    //show popup alert
    
    $('.popup-alert .btn-yes').data('target-tab', $(this).data('selection'));

    const active = $('.request-for-item.active').data('selection');

    for(let i = 0; i < $('.' + active + ' input[type=text]').length; i++) {
      if($('.' + active + ' input[type=text]').eq(i).val().trim()) {
        $('.popup-alert').addClass('show-popup');
        return false;
      }
    }
    openRequestType();

    return false;
  });

  function openRequestType(url = false) {
    //reset selected tab
    const active = $('.request-for-item.active').data('selection');
    $('.' + active + ' input[type=text]').val('');
    $('#eformCheckbox').prop('checked', false);

    $('.' + active + ' input[type=text]').each(function() {
      let attrRequired = $(this).attr('required');
      if (typeof attrRequired !== 'undefined' && attrRequired !== false) {
        let $message = $(this).parent().find('.message-required');
        $message.hide();
        $(this).removeClass('warning-required-field');
      }
    });

    if (type === 'ync') {
      $('.' + active + ' .' + '-ync' + ' .' + active + '-item:not(:first)').remove();
    } else {
      $('.' + active + ' .' + '-nus' + ' .' + active + '-item:not(:first)').remove();
    }

    //change tab
    const target = $('.popup-alert .btn-yes').data('target-tab');
    const requestForms = ["request-article", "request-book", "request-media", "request-journal"];
    let selection = "request-article";
    if (!url) {
      selection = $('#' + target).data("selection");
    } else {
      const mode = getUrlParameter("type") ? getUrlParameter("type") : 'article';
      if (mode) {
        selection = `request-${mode}`;
      }
    }
    requestForms.forEach(requestForm => {
      if (requestForm !== selection) {
        $('#'+requestForm).removeClass("active");
        $('.'+requestForm).addClass("d-none");
      } else {
        const el = $('#'+requestForm);
        el.addClass("active");
        $('.'+requestForm).removeClass("d-none");
        $('#dropdown-request-for span').html(el.html());
        if (type === "ync") {
          $('.' + requestForm + '-ync').removeClass("d-none");
          $('.' + requestForm + '-nus').addClass("d-none");
          if (selection === 'request-article' || selection === 'request-book') {
            $('.declaration-confirm').addClass("d-none");
            $('.div-btn.form-action').addClass("d-none");
          } else {
            $('.declaration-confirm').removeClass("d-none");
            $('.div-btn.form-action').removeClass("d-none");
          }
        } else {
          $('.' + requestForm + '-nus').removeClass("d-none");
          $('.' + requestForm + '-ync').addClass("d-none");
        }

        // valid accessing
        validMatrixAccessing(requestForm);
      }
    });

    $('.' + safeText(selection) + ' input[type=text]').each(function() {
      let attrRequired = $(this).attr('required');
      if (typeof attrRequired !== 'undefined' && attrRequired !== false) {
        let $message = $(this).parent().find('.message-required');
        $message.hide();
        $(this).removeClass('warning-required-field');
      }
    });

    // update url
    if (history.pushState) {
      let url = $('.request-for-item.active').attr('href');
      let arrCurrentUrl = window.location.href.split('?');
      if (arrCurrentUrl.length > 1) {
          let arrUrl = url.split('?');
          if (arrCurrentUrl[1].indexOf(arrUrl[1]) > -1) {
              url = arrUrl[0] + '?' + arrCurrentUrl[1];
          } else {
              let params = arrCurrentUrl[1].split('&');
              if (params.length > 0) {
                  let newParams = [];
                  newParams.push(arrUrl[1]);
                  for (let i = 0; i < params.length; i++) {
                      if (params[i].split('=')[0] !== arrUrl[1].split('=')[0]) {
                          newParams.push(params[i]);
                      }
                  }

                  url = arrUrl[0] + '?' + newParams[0];
                  for (let i = 1; i < newParams.length; i++) {
                      url = url + '&' + newParams[i];
                  }
              } else {
                  url = url + '&' + arrCurrentUrl[1];
              }
          }   
      }
      if(typeof url !== 'undefined'){
        var newurl = window.location.protocol + "//" + window.location.host + url;
        window.history.pushState({path:newurl},'',newurl);
      }
    }
  }

  //yes change request type
  $('.popup-alert .btn-yes').on('click', function () {
    openRequestType();
    $('.popup-alert').removeClass('show-popup');
  });

  //close popup alert
  $('.popup-alert .btn-close-popup, .popup-alert .btn-no').on('click', function () {
    $('.popup-alert').removeClass('show-popup');
  });

  // dropdown
  $('body').on('click', '.form-row .dropdown .dropdown-menu input[type=radio]', function () {
    const selected = $(this).parent().find('label').html();
    $(this).parents('.dropdown').find('.dropdown-toggle').html(selected);
  });

  // key up
  $(window).on('keyup', function (e) {

    let $target = $(e.target);
    let attrRequired = $target.attr('required');

    if (typeof attrRequired !== 'undefined' && attrRequired !== false) {
      let val = $target.val().trim();
      let $message = $target.parent().find('.message-required');
      if (val) {
        //special case for bookIsbn & journalIssn which check IBSN & ISSN so ignore hide message
        if ($target.attr('id') === 'bookIsbn' || $target.attr('id') === 'journalIssn')
            return;
        $message.hide();
        $target.removeClass('warning-required-field');
      }
      else {
        $message.show();
        $target.addClass('warning-required-field');
      }
    }
    
  });

  /***************************************** GENERAL BLOCK ************************************************************/
  $(document).on('change','input[name^=media-format-], input[name^=journal-reason-], input[name^=intralib-stack-]',function() {
    const nameSelected = $(this).attr("name");
    const idSelected = $(this).attr("id");
    $('.' + nameSelected).addClass("d-none");
    $('.' + idSelected).removeClass("d-none");
  });

  $(document).on('click','.icon-remove-item',function() {
    const classNames = $(this).attr('class');
    const cls = classNames.split(" ");
    const clPosition = cls[cls.length - 1];
    const typeFor = cls[cls.length - 2].split('-')[1];
    $(`.request-${typeFor}-item.${clPosition}`).remove();
    $(`.request-${typeFor}-${type} .${typeFor}-break-line:last`).addClass("d-none");
  });

  function makeupAfterInserted(typeFor) {
    $(`.request-${typeFor}-${type} .${typeFor}-break-line`).removeClass("d-none");
    $(`.request-${typeFor}-${type} .${typeFor}-break-line:last`).addClass("d-none");
    $(`.request-${typeFor}-${type} .icon-remove-item.remove-${typeFor}`).removeClass("d-none");
    $(`.request-${typeFor}-${type} .icon-remove-item.remove-${typeFor}:first`).addClass("d-none");
  }

  function dynamicElName(el, selection, replaced) {
    $(el).find(`input[name^=${selection}]`).attr("name", $(el).find(`input[name^=${selection}]`).attr("name")?.replaceAll('0', replaced));
  }

  function dynamicCheckbox(el, selection, replaced) {
    $(el).find(`input[id^=${selection}]`).attr("id", $(el).find(`input[id^=${selection}]`).attr("id")?.replaceAll('0', replaced));
    $(el).find(`textarea[id^=${selection}]`).attr("id", $(el).find(`textarea[id^=${selection}]`).attr("id")?.replaceAll('0', replaced));
    $(el).find(`label[for^=${selection}]`).attr("for", $(el).find(`label[for^=${selection}]`).attr("for")?.replaceAll('0', replaced));
    $(el).find(`button[id^=${selection}]`).attr("id", $(el).find(`button[id^=${selection}]`).attr("id")?.replaceAll('0', replaced));
  }

  function dynamicElBlock(el, elName, elId, replaced) {
    $(el).find(`.${elName}-${type}-item-0.${elId}-${type}-item-0`).attr("class", $(el).find(`.${elName}-${type}-item-0.${elId}-${type}-item-0`).attr("class")?.replaceAll('0', replaced));
  }

  function dynamicDropdownItems(el, replaced) {
    $(el).find('.dropdown-menu .custom-control.custom-radio').each(function() {
      let name = $(this).find('input').attr('name') + "-" + replaced;
      let id = $(this).find('input').attr('id') + "-" + replaced;
      $(this).find('input').attr('name', name).attr('id', id);
      $(this).find('label').attr('for', id);
    });
  }

  function datepickerActivate() {
    applyDatepickerInput();
    applyDatepicker();
  }

  function getIdPosition(selection) {
    const classNames = $(selection).attr('class');
    const cls = classNames.split("item-");
    return Number(cls[1]) + 1;
  }

  /*********************************** ARTICLE BLOCK ******************************************************************/
  $('#btn-add-more-article').on('click', function () {
    const nextEl = $(nextElArticle).clone();
    const index = getIdPosition('.request-article-item:last');
    $(nextEl).removeClass("item-0").addClass("item-"+index);
    $(nextEl).find('.icon-remove-item').removeClass("item-0").addClass("item-"+index);
    dynamicElName(nextEl, 'article-reason', index);
    dynamicCheckbox(nextEl, 'article-teaching', index);
    dynamicCheckbox(nextEl, 'article-consultancy', index);
    $(nextEl).insertAfter(".request-article-item:last");
    makeupAfterInserted('article');
  });

  /****************************************** BOOK BLOCK **************************************************************/
  $('#btn-add-more-book').on('click', function () {
    const nextEl = $(nextElBook).clone();
    const index = getIdPosition('.request-book-item:last');
    $(nextEl).removeClass("item-0").addClass("item-"+index);
    $(nextEl).find('.icon-remove-item').removeClass("item-0").addClass("item-"+index);
    dynamicDropdownItems(nextEl, index);
    $(nextEl).insertAfter(".request-book-item:last");
    makeupAfterInserted('book');
    datepickerActivate();
  });

  /***************************************** MEDIA BLOCK **************************************************************/
  $('#btn-add-more-media, #btn-add-more-media-ync').on('click', function () {
    const nextEl = $(nextElMedia).clone();
    const index = getIdPosition(`.request-media-${type} .request-media-item:last`);
    $(nextEl).removeClass("item-0").addClass("item-"+index);
    $(nextEl).find('.icon-remove-item').removeClass("item-0").addClass("item-"+index);
    dynamicElName(nextEl, 'media-format', index);
    dynamicElName(nextEl, 'media-would-like', index);
    dynamicCheckbox(nextEl, 'media-dvd', index);
    dynamicCheckbox(nextEl, 'media-streaming', index);
    dynamicCheckbox(nextEl, 'media-like-yes', index);
    dynamicCheckbox(nextEl, 'media-like-no', index);
    dynamicElBlock(nextEl, 'media-format', 'media-dvd', index);
    dynamicElBlock(nextEl, 'media-format', 'media-streaming', index);
    $(nextEl).insertAfter(`.request-media-${type} .request-media-item:last`);
    makeupAfterInserted('media');
  });

  /***************************************** JOURNAL BLOCK ************************************************************/
  $('#btn-add-more-journal, #btn-add-more-journal-ync').on('click', function () {
    const nextEl = $(nextElJournal).clone();
    const index = getIdPosition(`.request-journal-${type} .request-journal-item:last`);
    $(nextEl).removeClass("item-0").addClass("item-"+index);
    $(nextEl).find('.icon-remove-item').removeClass("item-0").addClass("item-"+index);
    dynamicElName(nextEl, 'journal-reason', index);
    dynamicCheckbox(nextEl, 'journal-teaching', index);
    dynamicCheckbox(nextEl, 'journal-research', index);
    dynamicCheckbox(nextEl, 'journal-others', index);
    dynamicElBlock(nextEl, 'journal-reason', 'journal-teaching', index);
    dynamicElBlock(nextEl, 'journal-reason', 'journal-research', index);
    dynamicElBlock(nextEl, 'journal-reason', 'journal-others', index);
    $(nextEl).insertAfter(`.request-journal-${type} .request-journal-item:last`);
    makeupAfterInserted('journal');
    datepickerActivate();
  });

  /****************************************** INTRALIBRARY LOAN **************************************************************/
  $('#btn-add-more-request-intralib').on('click', function () {
    const nextEl = $(nextElIntra).clone();
    const index = getIdPosition('.request-intra-item:last');
    $(nextEl).removeClass("item-0").addClass("item-"+index);
    $(nextEl).find('.icon-remove-item').removeClass("item-0").addClass("item-"+index);
    dynamicElName(nextEl, 'intralib-stack', index);
    dynamicCheckbox(nextEl, 'stack-yes', index);
    dynamicCheckbox(nextEl, 'stack-no', index);
    dynamicElBlock(nextEl, 'intralib-stack', 'stack-yes', index);
    dynamicElBlock(nextEl, 'intralib-stack', 'stack-no', index);
    dynamicDropdownItems(nextEl, index);
    $(nextEl).insertAfter(".request-intra-item:last");
    makeupAfterInserted('intra');
    datepickerActivate();
  });

  $(document).ready(function(){
    $("[data-toggle=tooltip]").tooltip({ placement: 'right'});
    openRequestType(true);

    // var previousState = window.history.state;
    // setInterval(function() {
    //     if (previousState !== window.history.state) {
    //         previousState = window.history.state;
    //         openRequestType(true);
    //     }
    // }, 100);

    if (type === "ync") {
      $('.request-article-ync').removeClass("d-none");
      $('.request-article-nus').addClass("d-none");
      $('.declaration-confirm').addClass("d-none");
      $('.div-btn.form-action').addClass("d-none");
    } else {
      $('.request-article-nus').removeClass("d-none");
      $('.request-article-ync').addClass("d-none");
    }

    // valid accessing
    validMatrixAccessing($('.request-article').length > 0 ? 'request-article' : 'request-intra');

  });

  $('.form-input .container-custom .div-btn .btn-common').on('click', function (e) {
    var checkRequestIntra = $('.request-article').length > 0 ? 'request-article' : 'request-intra';
    if (!$(".declaration-confirm .custom-checkbox .custom-control-input").is(':checked') && checkRequestIntra != 'request-intra') {
      showPopupError('Please accept declaration before proceeding.');
    }
    e.stopPropagation();
  });
  $('.popup-error .popup-container .popup-body .btn-yes').on('click', function () {
    $('.popup-error').removeClass('show-popup');
  });

  //tooltip eforms
  $(function () {
    $('.more-info[title]').tooltip({
      template: `<div class="have-tooltip"><div class="tool-tip tool-tip-eform"><p class="tooltip-inner border-none"></p></div></div>`
    });
  });
  $(function () {
    $('.more-info-streaming-video[title]').tooltip({
      template: `<div class="have-tooltip"><div class="tool-tip tool-tip-streaming-video"><p class="tooltip-inner border-none"></p></div></div>`
    });
  });
  $(function () {
    $('.tooltip-journals[title]').tooltip({
      template: `<div class="have-tooltip tooltip-journals"><div class="tool-tip tool-tip-eform"><p class="tooltip-inner border-none"></p></div></div>`
    });
  });
  $(function () {
    $('.tooltip-media[title]').tooltip({
      template: `<div class="have-tooltip tooltip-media"><div class="tool-tip tool-tip-media"><p class="tooltip-inner border-none"></p></div></div>`
    });
  });

})(jQuery);

function showPopupError(msg) {
  $('.popup-error .popup-body .text-left p').html(msg);
  $('.popup-error').addClass('show-popup');
}


function validSubmitForm() {

  let result = true;

  $('.form-row input[required]:visible').each(function() {
    let $target = $(this);
    let val = $target.val().trim();
    let $message = $target.parent().find('.message-required');
    if (val) {
      $message.hide();
      $target.removeClass('warning-required-field');
    }
    else {
      result = false;
      $message.show();
      $target.addClass('warning-required-field');
    }
  });

  return result;
};
'use strict';
(function() {
  //clone microsite nav template 2 into breadcrumb-microsite
  function cloneMicrositeNav2() {
    var micrositeNav = $('.microsite-nav-template-2')
    var $navClone = $(micrositeNav).clone();
    $('.navigation-clone').html($navClone);
    $(micrositeNav).css('display', 'none');
  }

  //clone microsite nav template 3 into breadcrumb-microsite
  function cloneMicrositeNav3() {
    var micrositeNav = $('.microsite-nav-template-3')
    var $navClone = $(micrositeNav).clone();
    $('.navigation-clone-template-3').html($navClone);
    $(micrositeNav).css('display', 'none');
  }

  cloneMicrositeNav2();
  cloneMicrositeNav3();

  $('body').on('click', '.microsite-nav .dropdown-nav .dropdown-item', function (e) {
    var $el = $(e.target)
    if ($el.hasClass('dropdown-item-parent')) {
      e.preventDefault();
      e.stopPropagation();
      $(e.target).siblings('.dropdown-item-parent.open').removeClass('open');
      $(e.target).next().siblings('.collapse').slideUp();
      $(e.target).toggleClass('open');
      $(e.target).next().slideToggle();
      $(e.target).next().toggleClass('show');
    }
    else {
      let text = $el.text();

      if ($el.hasClass('dropdown-item-child')) {
        text = $el.parent().prev().text() + ' <i class="fas fa-angle-right"></i> ' + text;
      }

      $el.parents('.dropdown-nav').find('button').html(text);
    }
    
  });

  function setHeightIconTitle() {
    
    $('.icon-tiles .tiles-list').each(function() {
      let height = 0;
      $(this).find('.icon-tile').css('height', '');

      $(this).find('.icon-tile').each(function() {
        let h = $(this).outerHeight();
        if (height < h) {
          height = h;
        }
      });

      $(this).find('.icon-tile').css('height', height);
    });
  }

  setHeightIconTitle();

  function showHideButtonNavTab($nav) {
    let $prev = $nav.find('.nav-item:visible:first').prev();

    if ($prev.length === 0) {
      $nav.prev().hide();
    }
    else {
      $nav.prev().show();
    }

    let $next = $nav.find('.nav-item:visible:last').next();

    if ($next.length === 0) {
      $nav.next().hide();
    }
    else {
      $nav.next().show();
    }
  }

  // function initNavTab() {
  //   let $navtab = $('.div-nav-tabs');

  //   $navtab.each(function() {
  //     let width = $(this).innerWidth() - 30;
  //     let w = 0
  //     let $nav = $(this).find('.nav');
  //     let $navitem = $nav.find('.nav-item');

  //     $navitem.hide();

  //     for(let i = 0; i < $navitem.length; i++) {
  //       let $item = $navitem.eq(i);
  //       $item.show();
  //       w += $item.outerWidth() + 40;
        
  //       if (w > width) {
  //         $item.hide();
  //         break;
  //       }
  //     }

  //     showHideButtonNavTab($nav);
  //   });
  // }

  function showNavItem($navcontainer, skip = -1) {
    let $nav = $navcontainer.find('.nav');
    let width = $navcontainer.innerWidth() - 30;
    let w = 0;
    let $navitem = $nav.find('.nav-item');

    $navitem.hide();

    console.log('skip', skip);

    for(let i = 0; i < $navitem.length; i++) {
      if (i <= skip) {
        continue;
      }

      let $item = $navitem.eq(i);
      $item.show();
      w += $item.outerWidth() + 40;      

      if (w > width) {
        $item.hide();
        break;
      }
    }

    showHideButtonNavTab($nav);
  }

  function initNavTabDesktop() {
    let $navdesktop = $('.microsite-nav .nav-desktop');

    $navdesktop.each(function() {
      showNavItem($(this), -1);
    });
  }

  // $('body').on('click', '.div-nav-tabs .btn-prev-nav, .nav-desktop .btn-prev-nav', function() {
  $('body').on('click', '.nav-desktop .btn-prev-nav', function() {
    let $el = $(this);
    let $navcontainer = $el.parent();
    let $nav = $el.next();
    let index = $nav.find('.nav-item:visible:first').index();
    showNavItem($navcontainer, index - 2);

    return false;
  });

  // $('body').on('click', '.div-nav-tabs .btn-next-nav, .nav-desktop .btn-next-nav', function() {
  $('body').on('click', '.nav-desktop .btn-next-nav', function() {
    let $el = $(this);
    let $navcontainer = $el.parent();
    let $nav = $el.prev();
    let index = $nav.find('.nav-item:visible:first').index();
    showNavItem($navcontainer, index);
    return false;
  });

  // initNavTab();

  initNavTabDesktop();

  $(document).ready(function() {
    setHeightIconTitle();

    // initNavTab();

    initNavTabDesktop();

    // setHeightNav();
  });
  

  $(window).on('resize', function() {
    setHeightIconTitle();

    // initNavTab();

    initNavTabDesktop();

    // setHeightNav();
  })

  $('.microsite-nav .container-fluid ul.nav').on('scroll', function() {
    $('.microsite-nav .container-fluid ul.nav .nav-item.show').removeClass('show');
    $('.microsite-nav .container-fluid ul.nav .nav-item .dropdown-menu.show').removeClass('show');
  })
  
})(jQuery);;
(function ($) {
    var applicationPath = $("#main").attr("data-application-path");
    if (applicationPath == '/')
        applicationPath = '';
    // Events
    try {
        AddBorder();
        $('.calendar-datepicker').on('dateChange', function (e, date) {
            $("#selectedDate").val(date.format('YYYY-MM-DDTHH:mm:ss'));
            ReranderUI(e, date);
        });
        ExpandFirstOpeningHours();
        RemoveDesktopSeeMoreBtn();
        RemoveMobileSeeMoreBtn();
    } catch (e) {
        // Donothing.
    }

    $(".list-libraries .dropdown-item").on('click', function (e) {
        e.preventDefault();
        var libId = $(e.target).data('libId')
        $("#libraryId").val(libId);
        $(".list-libraries .dropdown-item").removeClass("d-none");
        $(e.target).addClass("d-none");
        $(".list-libraries #dropdownMenuButton").html($(e.target).html())

        ReranderUI()
    });


    // Render HTML Functions
    function ReranderUI() {
        var libId = $("#libraryId").val();
        var date = moment($("#selectedDate").val());
        $.ajax({
            type: 'GET',
            url: applicationPath + "/api/OpeningHour/GetOpeningHoursCalendarData",
            contentType: "application/json; charset=utf-8",
            date: date.clone(),
            data: {
                "dateTime": date.format('YYYY-MM-DDTHH:mm:ss'),
                "libraryId": libId
            },
            success: function (data) {
                var date = this.date;
                RenderDesktopCalendar(data, date);
                RenderMobileCalendar(data, date);
                AddBorder();
                BindEventButton();
            }
        });
    }

    // Desktop
    function RenderDesktopCalendar(data, date) {
        let result = data.result;
        var html = `<table class="table table-responsive d-none d-md-block">
                <thead>
                    ${RenderDesktopHeader(date.clone())}
                </thead>
                <tbody>
                    ${RenderAllDesktopLibRows(result.LibraryOpeningHours)}
                </tbody>
            </table>`

        $(".list-libraries .container-custom .table").replaceWith(html);
        $(".list-libraries table.table-responsive").find("tr").last().addClass("border-bottom");
        RemoveDesktopSeeMoreBtn();
    }

    function RenderDesktopHeader(date) {
        let cloneDate = date.clone();
        var startOfWeek = cloneDate.startOf("isoWeek");
        cloneDate = date.clone();
        var endOfWeek = cloneDate.endOf("isoWeek");

        var firstHeader = `<th scope="col">
            <strong class="d-inline-block">
                ${startOfWeek.format("DD MMM").toUpperCase()} -
                ${endOfWeek.format("DD MMM").toUpperCase()}
                </strong> ${startOfWeek.format("yyyy")}
            </th>`

        var anotherHeaders = '';
        for (var i = 0; i < 7; i++) {
            if (i !== 0) {
                startOfWeek.add(1, 'days');
            }
            anotherHeaders += `<th scope="col" class="${startOfWeek.format("DDMMYYYY") === moment().format("DDMMYYYY") ? 'active' : ''}">
                ${startOfWeek.format("MMM DD")}<strong>${startOfWeek.format("ddd")}</strong>
            </th>`;
        }

        let html = `<tr>
           ${firstHeader}
           ${anotherHeaders}
          </tr>`;

        return html;
    }

    function RenderAllDesktopLibRows(libraryOpeningHours = []) {
        let html = "";
        if (libraryOpeningHours.length > 0) {
            for (var i = 0; i < libraryOpeningHours.length; i++) {
                let lib = libraryOpeningHours[i];
                html += RenderDesktopLibRow(lib, );

                for (var levelIndex = 0; levelIndex < lib.LevelOpeningHoursInfo.length; levelIndex++) {
                    html += RenderLevelRow(lib.LevelOpeningHoursInfo[levelIndex], lib.OpeningHoursOfWeek, lib.LibraryId);
                }

                if (i !== (libraryOpeningHours.length - 1)) {
                    html += `<tr class="tr-custom">
                     <td>&nbsp;</td>
                         ${RenderSeparateLineForDesktop(lib.OpeningHoursOfWeek)}
                    </tr>`
                }
            }
        }

        return html;
    }

    function RenderDesktopLibRow(lib, isLastItem) {
        var html = `<tr data-id="${lib.LibraryId}">
            <td class="name">
                <a class="p-0 m-0" href="${lib.Url == null ? '' : lib.Url}">${lib.LibraryName}</a>
                <button class="btn btn-see-more-central-library">See More +</button>
            </td>
            ${RenderDesktopOpeningHours(lib.OpeningHoursOfWeek)}
        </tr>`


        return html;
    }

    function RenderLevelRow(level, libOpeningHoursInfo, libraryId) {
        var html = "";
        if (!IsEqualOpeningHoursOfWeek(level.OpeningHoursOfWeek, libOpeningHoursInfo)) {
            html += `<tr class="see-more d-none" data-lib-id="${libraryId}" >
                <td class="name name-child">
                   ${level.LevelName}
                </td>
                ${RenderDesktopOpeningHours(level.OpeningHoursOfWeek)}
            </tr>`
        }

        html += RenderSectionRow(level.SectionOpeningHoursInfo, libOpeningHoursInfo, libraryId);
        return html;
    }

    function RenderSectionRow(sections, libOpeningHoursInfo, libraryId) {
        let html = "";
        sections.forEach(section => {
            if (!IsEqualOpeningHoursOfWeek(section.OpeningHoursOfWeek, libOpeningHoursInfo)) {
                html += `<tr class="see-more d-none" data-lib-id="${libraryId}">
                    <td class="name name-child">
                       ${section.SectionName}
                    </td>
                    ${RenderDesktopOpeningHours(section.OpeningHoursOfWeek)}
                </tr >`
            }
        });

        return html;
    }

    function RenderDesktopOpeningHours(openingHoursOfWeek) {
        let html = "";
        for (const property in openingHoursOfWeek) {
            html += `<td class="${openingHoursOfWeek[property].toLocaleLowerCase() === "closed" ? "closed" : ""}
                ${moment(property).format("DDMMYYYY") === moment().format("DDMMYYYY") ? 'active' : ''}">
                  ${ConverOpeningHourTime(openingHoursOfWeek[property])}
            </td>`
        }

        return html;
    }

    function RenderSeparateLineForDesktop(openingHoursOfWeek) {
        let html = "";
        for (const property in openingHoursOfWeek) {
            html += `<td class=" ${moment(property).format("DDMMYYYY") === moment().format("DDMMYYYY") ? 'active' : ''}">
                 &nbsp;
            </td>`
        }

        return html;
    }

    function RemoveDesktopSeeMoreBtn() {
        $(".list-libraries .table.table-responsive.d-none.d-md-block tr").each((i, e) => {
            if ($(e).attr("data-id")) {
                var id = $(e).data("id");
                var selectorCss = "tr[data-lib-id=" + id + "]"
                var child = $(selectorCss);
                if (child.length == 0) {
                    $(e).find('.btn-see-more-central-library').addClass("d-none");
                }
            }
        })
    }

    // Mobile
    function RenderMobileCalendar(data, date) {
        let result = data.result;
        let cloneDate = date.clone();
        let html = `<div class="list-library-mobile d-md-none">
                <div class="item">
                    <div class="date-label">
                        <h4 class="title">
                            ${cloneDate.startOf("isoWeek").format("DD MMM").toUpperCase()} -
                            ${cloneDate.endOf("isoWeek").format("DD MMM").toUpperCase()}
                            <span>${cloneDate.format("yyyy")}</span>
                        </h4>
                    </div>
                    <div id="accordion" class="accordion-table">
                        ${RenderMobileLibrary(result.LibraryOpeningHours)}
                    </div>
                </div>
         </div>`
        $('.list-library-mobile').html(html);
        RemoveMobileSeeMoreBtn();
    }

    function RenderMobileLibrary(libraryOpeningHours = []) {
        let html = "";
        libraryOpeningHours.forEach(function (lib) {
            html += `<div class="card border-none">
                <div class="card-header bg-none d-flex justify-content-between align-items-center"
                    data-toggle="collapse" data-target="#collapse_${lib.LibraryId}"
                    aria-expanded="true" aria-controls="collapse_${lib.LibraryId}"id="heading_${lib.LibraryId}">
                    <a class="btn btn-accordion-table"  href="${lib.Url == null ? '' : lib.Url}">
                         ${lib.LibraryName}
                    </a>
                    <span>+</span>
                </div>

                <div id="collapse_${lib.LibraryId}" class="collapse" aria-labelledby="heading_${lib.LibraryId}" data-parent="#accordion">
                    <div class="card-body">
                        <div class="library-item">
                            <div class="date-parent" data-id="${lib.LibraryId}">
                                ${RenderMobileOpeningHour(lib.OpeningHoursOfWeek)}
                                <button class="btn btn-see-more-central-library btn-see-more-mobile" id="btn-see-more-central-library">
                                    See More +
                                </button>
                            </div>
                            ${RenderMobileLevel(lib.LevelOpeningHoursInfo, lib.OpeningHoursOfWeek, lib.LibraryId)}
                        </div>
                    </div>
                </div>
            </div>`;
        });
        return html;
    }

    function RenderMobileLevel(levels = [], libOpeningHoursInfo, libraryId) {
        let html = "";
        levels.forEach(function (level) {
            if (!IsEqualOpeningHoursOfWeek(libOpeningHoursInfo, level.OpeningHoursOfWeek)) {
                html += `<div class="date-children d-none" data-lib-id="${libraryId}">
                    <h4 class="title">${level.LevelName}</h4>
                    ${RenderMobileOpeningHour(level.OpeningHoursOfWeek)}
                </div>`
            }

            html += RenderMobileSection(level.SectionOpeningHoursInfo, libOpeningHoursInfo, libraryId);
        });
        return html;
    }

    function RenderMobileSection(sections = [], libOpeningHoursInfo, libraryId) {
        let html = "";
        sections.forEach(function (section) {
            if (!IsEqualOpeningHoursOfWeek(libOpeningHoursInfo, section.OpeningHoursOfWeek)) {
                html += `<div class="date-children d-none" data-lib-id="${libraryId}">
                    <h4 class="title">${section.SectionName}</h4>
                    ${RenderMobileOpeningHour(section.OpeningHoursOfWeek)}
                </div>`
            }
        });
        return html;
    }

    function RenderMobileOpeningHour(openingHoursOfWeek) {
        let html = "";
        for (const property in openingHoursOfWeek) {
            var cssClass = moment(property).format("DDMMYYYY") === moment().format("DDMMYYYY") ? 'active' : ''
            html += `<div class="row item ${cssClass}">
                <div class="col-6 pl-0 pr-0">
                    <p>${moment(property).format("MMM DD")}
                 <span> ${moment(property).format("ddd")}</span></p>
                </div>
                <div class="col-5 offset-1 pl-0 pr-0 text-center">
                    <p class="${openingHoursOfWeek[property].toLocaleLowerCase() === "closed" ? "closed" : ""}">
                        ${ConverOpeningHourTime(openingHoursOfWeek[property])}
                    </p>
                </div>
            </div>`
        }
        return html;
    }
    function RemoveMobileSeeMoreBtn() {
        $(".list-libraries .list-library-mobile .card").each((i, e) => {
            var dataId = $(e).find(".date-parent").data("id");
            var selectorCss = ".date-children[data-lib-id=" + dataId + "]"
            var child = $(e).find(selectorCss);
            if (child.length == 0) {
                $(e).find('.btn.btn-see-more-central-library.btn-see-more-mobile').addClass("d-none");
            }
        })
    }

    function ConverOpeningHourTime(time = "") {
        if (time.toLocaleLowerCase() == "closed") {
            return time.toUpperCase();
        }

        var timeArray = time.split('-');
        if (time.Length < 2) {
            return time;
        }

        var startHours = timeArray[0];
        var endHours = timeArray[1];

        if (startHours && endHours) {
            return moment(startHours, 'HH:mm').format('hh:mm A') + " - " + moment(endHours, 'HH:mm').format('hh:mm A');
        }
        else {
            return time
        }
    }

    function BindEventButton() {
        //table PC in central-library
        $('.list-libraries .container-custom .table tbody tr button.btn-see-more-central-library').on('click', function (e) {
            var parent = $(e.target).parent().parent();
            var getdataIdParent = $(parent).attr('data-id');

            var lastTableRow = $(parent).siblings().last();
            var lastId = $(lastTableRow).data('id') ? $(lastTableRow).data('id') : $(lastTableRow).data('libId');

            if (getdataIdParent == lastId) {
                if ($(this).html().trim() == 'See More +') {
                    $(parent).removeClass("border-bottom");
                    $(lastTableRow).addClass("border-bottom");
                } else {
                    $(parent).addClass("border-bottom");
                    $(lastTableRow).removeClass("border-bottom");
                }
            }
            else {
                var child = $('tr[data-lib-id=' + getdataIdParent + ']');
                if (child.length > 0) {
                    // $(parent).toggleClass("border-bottom");
                    child.last().toggleClass("border-bottom");
                }
            }

            $(parent)
                .siblings()
                .each(function (index, el) {
                    var dataId = $(el).data('libId');
                    if (dataId == getdataIdParent) {
                        $(el).toggleClass('d-none');
                    }
                });
        });

        //table mobile in central-library
        $('.btn-see-more-central-library').on('click', function () {
            if ($(this).html() == 'See More +') {
                $(this).addClass('btn-see-less');
                $(this).html('See Less -');
            } else {
                $(this).removeClass('btn-see-less');
                $(this).html('See More +');
            }
        });

        $('.btn-see-more-mobile').on('click', function (e) {
            var parent = $(e.target).parent();
            var getdataIdParent = $(parent).data('id');
            $(parent)
                .siblings()
                .each(function (index, el) {
                    var dataId = $(el).data('libId');
                    if (dataId == getdataIdParent) {
                        $(el).toggleClass('d-none');
                    }
                });
        });

        var $tableMobile = $('.list-library-mobile');
        $tableMobile.find('.collapse.show').each(function () {
            $(this).prev().find('span').html('-');
        });

        $tableMobile.find('.collapse')
            .on('show.bs.collapse', function () {
                $(this).prev().find('span').html('-');
            })
            .on('hidden.bs.collapse', function () {
                $(this).prev().find('span').html('+');
            });
        ExpandFirstOpeningHours();
    }

    function ExpandFirstOpeningHours() {
        $('.list-libraries .container-custom .table tbody tr button.btn-see-more-central-library').first().trigger('click');
        //$('.list-libraries .list-library-mobile .card-header').first().trigger('click');
    }

    function AddBorder() {
        let trList = $(".list-libraries table.table-responsive").find("tr");
        let lastTr = $(trList).last();
        if ($(lastTr).data("id")) {
            $(lastTr).addClass("border-bottom");
        } else {
            let id = $(lastTr).data("libId");
            if (id) {
                var slectAttr = "tr[data-id=" + id +"]"
                $(".list-libraries table.table-responsive")
                    .find(slectAttr)
                    .addClass("border-bottom");
            }
        }

        $(".list-libraries .collapse").first().addClass("show")
    }

    // Common
    function IsEqualOpeningHoursOfWeek(openingHours1, openingHours2) {
        var arrayValue1 = Object.keys(openingHours1).map((key) => openingHours1[key])
        var arrayValue2 = Object.keys(openingHours2).map((key) => openingHours2[key]);

        for (var i = 0; i < arrayValue1.length; i++) {
            if (arrayValue1[i].replace(/\s/g, '').toLocaleLowerCase() !=
                arrayValue2[i].replace(/\s/g, '').toLocaleLowerCase()) {
                return false;
            }
        }

        return true;
    }

    try {
        $('.datepicker').datetimepicker({
            defaultDate: moment(),
            format: 'YYYY-MM-DD',
        }).on('dp.change', function (e) {
            var date = e?.date || moment();
            var timeFormat = $('[data-twevle-hour-format]');
            var timeFormatValue = timeFormat != null ? timeFormat.data('twevle-hour-format') == 'True' : false;
            $.ajax({
                type: 'GET',
                url: applicationPath + "/api/OpeningHour/GetListOpeningHoursByDatetime?dateTime=" + date.format('MM/DD/YYYY') + "&isTwelveHourFormat=" + timeFormatValue,
                contentType: "application/json; charset=utf-8",
                success: function (data) {
                    var isToday = moment().format('MM/DD/YYYY') == date.format('MM/DD/YYYY')
                    $('#mobileRender').find('.col-md-3').each(function (index, element) {
                        var hours = $(element).find('p');
                        var occupancy_1 = $(element).find('h5[data-default-mobile-1]');
                        var occupancy_2 = $(element).find('h5[data-default-mobile-2]');
                        var libId = hours.data('lib-id');
                        var timeValue = data.result.find(x => x.LibraryId == libId);
                        var occupancyDefaultData_1 = occupancy_1.data('default-mobile-1');
                        var occupancyDefaultData_2 = occupancy_2.data('default-mobile-2');
                        hours.html(timeValue != null ? timeValue.OpeningHour : "CLOSED");
                        occupancy_1.html(isToday ? occupancyDefaultData_1 : "No Data");
                        occupancy_2.html(isToday ? occupancyDefaultData_2 : "No Data");
                    })

                    $('#desktopRender').find('.col-md-3').each(function (index, element) {
                        var hours = $(element).find('p');
                        var occupancy = $(element).find('h5');
                        var occupancyDefaultData = occupancy.data('default');
                        var libId = hours.data('lib-id');
                        var timeValue = data.result.find(x => x.LibraryId == libId);
                        hours.html(timeValue != null ? timeValue.OpeningHour : "CLOSED");
                        occupancy.html(isToday ? occupancyDefaultData : "No Data");
                    })
                }
            });
        }).trigger('dp.change');
    } catch (e) {

    }
})(jQuery);
////$(function () {
////    var eventEl = $("#event-detail-breadcrumb");

////    if (eventEl.length > 0) {
////        var liTags = $(".page-header ul li");
////        $(eventEl).prepend(liTags);
////    }
////})(jQuery);
(function ($) {
    var applicationPath = $("#main").attr("data-application-path");
    if (applicationPath == '/')
        applicationPath = '';

    let notFoundLabel = $('#whatOnNotFoundLabel').val();
    let defaultImage = $('#whatOnDefaultImage').val();
    let eventPageTemplate = $('#eventDetailPageTemplate').val();
    let newsPageTemplate = $('#newsDetailPageTemplate').val();

    let whatOnWidget = $('#pills-tab');
    if (!whatOnWidget.length)
        return;

    $(document).ajaxStart(function () {
        $(document.body).css({ 'cursor': 'wait' });
    }).ajaxStop(function () {
        $(document.body).css({ 'cursor': 'default' });
    });

    $(document).ready(function () {
        getEventsClassify();

        let searchParams = new URLSearchParams(window.location.search);
        let param = searchParams.get('active');
        let tabId = '#pills-' + param + '-tab';

        if ($(tabId).length)
            $(tabId).tab('show');
        else
            $('#pills-tab li:first-child a').tab('show');

        loadArchiveFilter();
    });

    let loadedTab = {};

    $('a[data-toggle="pill"]').on('shown.bs.tab', function (e) {
        let currentTabId = $(e.target).attr('id');

        if (!loadedTab[currentTabId]) {
            loadedTab[currentTabId] = true;
            getContentByTab(currentTabId);
        }
    })

    function getContentByTab(tabId) {
        switch (tabId) {
            case "pills-all-tab":
                getAllNewsAndEvents();
                break;
            case "pills-news-tab":
                getNews();
                break;
            case "pills-events-tab":
                getUpcomingEvents();
                getPastEvents();
                break;
            case "pills-archive-tab":
                reloadArchiveNewsAndEvents();
                break;
        }
    };

    function PageInfo(skipCount, takeCount) {
        this.skipCount = skipCount;
        this.takeCount = takeCount;
    };

    let highlightsPageInfo = new PageInfo(0, 3);
    let newsPageInfo = new PageInfo(0, 3);
    let upcommingEventsPageInfo = new PageInfo(0, 3);
    upcommingEventsPageInfo.eventSubcategories = [];

    let pastEventsPageInfo = new PageInfo(0, 3);
    pastEventsPageInfo.eventSubcategories = [];

    function getAllNewsAndEvents() {
        let isFirstTime = highlightsPageInfo.skipCount === 0;
        if (isFirstTime) {
            // load more 1 item for feature highlight
            highlightsPageInfo.takeCount++;
        }

        $.ajax({
            type: 'GET',
            url: applicationPath + "/api/WhatOn/GetAllNewsAndEvents",
            data: highlightsPageInfo,
            contentType: "application/json; charset=utf-8",
            cache: true,
            success: function (data) {
                var items = data.result.Data;

                //hide load more btn when load all data
                if (highlightsPageInfo.skipCount + items.length >= data.result.TotalCount)
                    $("#load-more-fh").hide();
                highlightsPageInfo.skipCount += items.length;

                if (isFirstTime) {
                    renderFeatureHighlight('#bigItemFH', items[0]);
                    // return to takeCount default
                    highlightsPageInfo.takeCount--;

                    if (items.length === 0) {
                        renderNotFoundLabel('#pills-all .item-content');
                    } else {
                        loadItemToContainer(items.slice(1), '#pills-all .item-content')
                    }
                } else {
                    loadItemToContainer(items, '#pills-all .item-content');
                }
            }
        });
    };

    function getNews() {
        let isFirstTime = newsPageInfo.skipCount === 0;
        if (isFirstTime) {
            newsPageInfo.takeCount++;
        }

        $.ajax({
            type: 'GET',
            url: applicationPath + "/api/WhatOn/GetNews",
            contentType: "application/json; charset=utf-8",
            data: newsPageInfo,
            cache: true,
            success: function (data) {
                let items = data.result.Data;

                if (newsPageInfo.skipCount + items.length >= data.result.TotalCount)
                    $("#load-more-news").hide();

                newsPageInfo.skipCount += items.length;

                if (isFirstTime) {
                    renderFeatureHighlight('#bigItemNews', items[0]);
                    newsPageInfo.takeCount--;

                    if (items.length === 0) {
                        renderNotFoundLabel('#pills-news .item-content');
                    } else {
                        loadItemToContainer(items.slice(1), '#pills-news .item-content');
                    }
                } else {
                    loadItemToContainer(items, '#pills-news .item-content');
                }
            }
        });
    };

    function getUpcomingEvents() {
        let isFirstTime = upcommingEventsPageInfo.skipCount === 0;
        if (isFirstTime) {
            upcommingEventsPageInfo.takeCount++;
        }

        $.ajax({
            type: 'GET',
            url: applicationPath + "/api/WhatOn/GetUpcomingEvents",
            data: upcommingEventsPageInfo,
            contentType: "application/json; charset=utf-8",
            cache: true,
            success: function (data) {
                let items = data.result.Data;

                if (upcommingEventsPageInfo.skipCount + items.length >= data.result.TotalCount)
                    $("#load-more-upcomming-event").hide();
                upcommingEventsPageInfo.skipCount += items.length;

                if (isFirstTime) {
                    if (items.length === 0) {
                        renderNotFoundLabel('#pills-events .upcomming-item-content');
                        renderFeatureHighlight('#bigItemUpcomingEvent', null);
                    } else {
                        renderFeatureHighlight('#bigItemUpcomingEvent', items[0]);
                        loadItemToContainer(items.slice(1), '#pills-events .upcomming-item-content');
                    }
                    
                    upcommingEventsPageInfo.takeCount--;
                } else {
                    loadItemToContainer(items, '#pills-events .upcomming-item-content');
                }
            }
        });
    };

    function getPastEvents() {
        let isFirstTime = pastEventsPageInfo.skipCount === 0;

        $.ajax({
            type: 'GET',
            url: applicationPath + "/api/WhatOn/GetPastEvents",
            data: pastEventsPageInfo,
            contentType: "application/json; charset=utf-8",
            cache: true,
            success: function (data) {
                let items = data.result.Data;

                if (pastEventsPageInfo.skipCount + items.length >= data.result.TotalCount)
                    $("#load-more-past-event").hide();

                pastEventsPageInfo.skipCount += items.length;

                if (isFirstTime && items.length === 0) {
                    renderNotFoundLabel('#pills-events .past-item-content');
                } else {
                    loadItemToContainer(items, '#pills-events .past-item-content');
                }
            }
        });
    };

    let archiveTabFilter = {
        month: new Date().getMonth(),
        year: new Date().getFullYear(),
        type: [],
        eventSubcategories: [],
        skipCount: 0,
        takeCount: 3
    };

    function getArchiveNewsAndEvents() {
        let isFirstTime = archiveTabFilter.skipCount === 0;

        let formValues = getFilterValues();

        archiveTabFilter.type = formValues.type;
        archiveTabFilter.eventSubcategories = formValues.eventSubcategories;

        // plus 1 to month because JS month starts at 0 to 11;
        var obj = $.extend({}, archiveTabFilter);
        obj.month++;

        $.ajax({
            type: 'GET',
            url: applicationPath + "/api/WhatOn/GetArchiveNewsAndEvents",
            data: obj,
            contentType: "application/json; charset=utf-8",
            cache: true,
            success: function (data) {
                let items = data.result.Data;

                if (archiveTabFilter.skipCount + items.length >= data.result.TotalCount)
                    $("#load-more-archive").hide();
                else
                    $("#load-more-archive").show();

                archiveTabFilter.skipCount += items.length;

                if (items.length === 0 && isFirstTime)
                    renderNotFoundLabel('#pills-archive .item-content');

                loadItemToContainer(items, '#pills-archive .item-content');
            }
        });
    };

    function getEventsClassify() {
        $.ajax({
            type: 'GET',
            url: applicationPath + "/api/WhatOn/GetEventsClassify",
            contentType: "application/json; charset=utf-8",
            cache: true,
            success: function (data) {
                let classifies = data.result.Data;

                $('#subcategoryList').append(renderClassify(classifies.Fields, ''));
                $('#eventFilterList').append(renderClassify(classifies.Fields, 'filterCat'));
                initSelectAllDirectCheckbox('#allCategories');
                initSelectAllCheckbox('#events');
                //$('input.has-child').each(function () {
                //    initSelectAllCheckbox(this);
                //});
            }
        });
    };

    function loadArchiveFilter() {
        var date = new Date(archiveTabFilter.year, archiveTabFilter.month, 1);

        $("#selectMonthMenu #dropdownMonthMenu").html(moment(date).format("MMMM"));
        $("#selectYearMenu #dropdownYearMenu").html(moment(date).format("YYYY"));
        $("#archive-filter-label").html(moment(date).format("MMMM YYYY"));
    };

    function reloadArchiveNewsAndEvents() {
        archiveTabFilter.skipCount = 0;

        removeItemfromContainer('#pills-archive .item-content');
        getArchiveNewsAndEvents();
    };

    function reloadEvents() {
        upcommingEventsPageInfo.skipCount = 0;
        pastEventsPageInfo.skipCount = 0;

        removeItemfromContainer('#pills-events .upcomming-item-content');
        removeItemfromContainer('#pills-events .past-item-content');
        getUpcomingEvents();
        getPastEvents();
    };

    function loadItemToContainer(data, container) {
        for (const item of data) {
            $(container).append(renderItem(item));
        }

        _backstretch_tile($(container));
    };

    function removeItemfromContainer(container) {
        $(container).html('');
    };

    function _backstretch_tile(comp) {
        var _tile_list = comp.find(".tile--list");
        var _tile_img = comp.find(".tile--list-img");

        for (var i = 0; i < _tile_list.length; i++) {
            var image_path = _tile_img.eq(i).attr("src-path");
            if (image_path)
                _tile_img.eq(i).backstretch(image_path);

        }
    };

    $("#load-more-fh").click(getAllNewsAndEvents);
    $("#load-more-news").click(getNews);
    $("#load-more-upcomming-event").click(getUpcomingEvents);
    $("#load-more-past-event").click(getPastEvents);
    $("#load-more-archive").click(getArchiveNewsAndEvents);

    $("#selectYearMenu .dropdown-item").click(function (e) {
        e.preventDefault();

        $("#selectYearMenu .dropdown-item").removeClass("d-none");
        $(e.target).addClass("d-none");

        archiveTabFilter.year = $(e.target).val();
        loadArchiveFilter();
        reloadArchiveNewsAndEvents();
    });

    $("#selectMonthMenu .dropdown-item").click(function (e) {
        e.preventDefault();

        $("#selectMonthMenu .dropdown-item").removeClass("d-none");
        $(e.target).addClass("d-none");

        archiveTabFilter.month = $(e.target).val();
        loadArchiveFilter();
        reloadArchiveNewsAndEvents();
    });

    $('#clearArchiveFilter').click(function (e) {
        e.preventDefault();

        $('.filterCat').find('input:checkbox').prop('checked', false);
        
    });

    $('#btnCategoriesDropdown').on('hide.bs.dropdown', function (e) {
        if (e.clickEvent) {
            e.preventDefault();
        }
    });

    $(window).on('click', function (e) {
        if ($(e.target).closest('.dropdown-menu').length > 0) {
            
        }
        else {
            $('#formArchiveFilter').closest('.dropdown-menu').removeClass('show');
        }
    });

    $('#applyArchiveFilter').click(function (e) {
        e.preventDefault();
        reloadArchiveNewsAndEvents();

        $('#formArchiveFilter').closest('.dropdown-menu').removeClass('show');
    });

    $('#btnApplyEventFilter').click(function (e) {
        e.preventDefault();

        let form = $('#eventFilterList').serializeArray();
        let result = {
            eventSubcategories: []
        };
        for (const item of form) {
            if (!result[item.name])
                result[item.name] = [item.value];
            else 
                result[item.name].push(item.value);

        }

        upcommingEventsPageInfo.eventSubcategories = result.eventSubcategories;
        pastEventsPageInfo.eventSubcategories = result.eventSubcategories;

        reloadEvents();
    });

    //slide to archive tab is handled in facilitie.js for FE, this code is only for filter event
    $('.button--view-past').click(function () {
        $('#allCategories').prop('checked', false);
        $('#news').prop('checked', false);
        $('#events').prop('checked', true);
        $('#events').trigger('change');

        //reset click tab when click on VIEW PAST EVENT
        loadedTab['pills-archive-tab'] = false;

        archiveTabFilter.month = new Date().getMonth();
        archiveTabFilter.year = new Date().getFullYear();
        loadArchiveFilter();
    })

    function renderFeatureHighlight(element, item) {
        if (!item) {
            $(element).html('');
            return;
        }

        let isEvent = item.Type == "Event";
        let type = isEvent ? "EVENTS" : "NEWS";

        let html = `<a href="${generateUrl(item)}" target="${item.IsBlogWP ? '_blank' : ''}" class="event-half marginTop30 marginBottom40" >
                        <div class="row">
                            <div class="col-lg-6 paddingLeft0 paddingRight0">
                                <div class="">
                                    <img class="img-thumbnail-whats-on bs-src full-width" src="${generateImageUrl(item)}">
                                </div>
                            </div>
                            <div class="col-lg-6 paddingLeft0 text-content">
                                <div class="paddingTop20 paddingBottom20">
                                    <span class="event-half__label">${type}</span>
                                    <h2>${item.Title}</h2>
                                    <p class="paddingTop15">
                                        ${item.Description}
                                    </p>
                                    <ul class="list-unstyled event-details">
                                        <li class="event-details__time">${renderDateString(item.PublishedDate, item.EndDate, isEvent)}</li>
                                        <li class="event-details__pin">${item.Location ? item.Location : ''}</li>
                                    </ul>
                                </div>
                            </div>
                        </div>
                    </a>`;

        $(element).html(html);
    };

    function renderItem(item) {
        let isEvent = item.Type == "Event";
        let type = isEvent ? "EVENTS" : "NEWS";
        let iconDate = isEvent ? "" : "date-time-news";

        return `<div class="col-lg-4 col-md-6 col-xs-12">
                    <div class="tile--list">
                        <a href="${generateUrl(item)}" target="${item.IsBlogWP ? '_blank' : ''}">
                            <div class="tile--list-img" src-path="${generateImageUrl(item)}"></div>
                            <div class="tile--list-desc">
                                <div class="tile--list-type">${type}</div>
                                <h5 class="tile--list-header" style="">${item.Title}</h5>
                                <p title="${renderDateString(item.PublishedDate, item.EndDate, isEvent)}" class="date-time ${iconDate}">${renderDateString(item.PublishedDate, item.EndDate, isEvent)}</p>
                                <div class="tile--list-tag">
                                ${item.Categories.map(function (cat)
                                {
                                    if (!cat)
                                        return '';
                                    return '<span>' + cat + '</span>'
                                }).join('')}
                                </div>
                            </div>
                        </a>
                    </div>
                </div>`;
    };

    function generateUrl(item) {
        if (item.IsBlogWP)
            return item.WPLink;

        if (item.DetailURL)
            return item.DetailURL;

        let isEvent = item.Type == "Event";
        let prefix = isEvent ? eventPageTemplate : newsPageTemplate;

        return prefix + item.Path;
    }

    function generateImageUrl(item) {
        let imageUrl = item.IsBlogWP ? item.WPImageSrc : item.ImageURL;

        if (!imageUrl)
            imageUrl = item.ImageURL;

        if (!imageUrl)
            imageUrl = defaultImage;

        return imageUrl;
    }

    function renderNotFoundLabel(element) {
        let html = `<h5 class="ml-4 mt-4">${notFoundLabel}</h5>`;
        $(element).html(html);
    };

    function renderDateString(start, end, isEvent) {
        let startDate = moment(start);
        if (!isEvent)
            return startDate.format('DD MMM YYYY');

        if (end) {
            let endDate = moment(end);
            //if the same date
            if (startDate.format('DD MMM YYYY') === endDate.format('DD MMM YYYY'))
                //11 Aug 2021, 10:30am - 2:20pm
                return `${endDate.format('DD MMM YYYY')}, ${startDate.format('hh:mma')} - ${endDate.format('hh:mma')}`;
            //if the same date
            else if (startDate.format('YYYY') === endDate.format('YYYY')) {
                //1 Aug - 15 Aug 2021, 10: 30am - 2: 20pm
                return `${startDate.format('DD MMM')} - ${endDate.format('DD MMM YYYY')}, ${startDate.format('hh:mma')} - ${moment(end).format('hh:mma')}`;
            }
            else
                //24 Dec 2021 - 2 Jan 2022, 8:00am - 2:30pm
                return `${startDate.format('DD MMM YYYY')} - ${endDate.format('DD MMM YYYY')}, ${startDate.format('hh:mma')} - ${moment(end).format('hh:mma')}`;
        }
        //25 Jul 2021, 05:00am,
        return startDate.format('DD MMM YYYY, hh:mma');
    }

    function renderClassify(items, classes) {
        return `<ul class="${classes}">
                    ${items.map(function (item) {
                        return `<li>
                                    <label for="${'check_' + item.Id}"><input type="checkbox" name="eventSubcategories" class="subOption ${item.Children?.length ? `has-child` : ''}" value="${item.Id}" id="${'check_' + guidGenerator()}"> ${item.Text}</label>
                                </li>`
                    }).join('')}
                </ul>`;
    };

    function guidGenerator() {
        var S4 = function () {
            return (((1 + Math.random()) * 0x10000) | 0).toString(16).substring(1);
        };
        return (S4() + S4() + "-" + S4() + "-" + S4() + "-" + S4() + "-" + S4() + S4() + S4());
    }

    function initSelectAllDirectCheckbox(checkboxAll) {
        checkboxAll = $(checkboxAll);

        if (checkboxAll != null) {
            var parent = checkboxAll.parent();
            var ul = parent.closest('ul');
            var childCheckboxes = ul.find('> li > label > input.subOption');

            for (checkbox of childCheckboxes) {
                $(checkbox).change(function () {
                    var checkedCount = ul.find('> li > label > input.subOption:checked').length;
                    checkboxAll.prop('checked', checkedCount == childCheckboxes.length);
                    checkboxAll.prop('indeterminate', checkedCount > 0 && checkedCount < childCheckboxes.length);
                });
            }

            checkboxAll.change(function () {
                ul.find('input.subOption').prop('checked', this.checked);
            });
        }
    }

    function initSelectAllCheckbox(checkboxAll) {
        checkboxAll = $(checkboxAll);

        if (checkboxAll != null) {
            var parent = checkboxAll.parent();
            var ul = parent.siblings('ul');
            var childCheckboxes = ul.find('input.subOption');

            for (checkbox of childCheckboxes) {
                $(checkbox).change(function () {
                    var checkedCount = ul.find('input.subOption:checked').length;
                    checkboxAll.prop('checked', checkedCount == childCheckboxes.length);
                    checkboxAll.prop('indeterminate', checkedCount > 0 && checkedCount < childCheckboxes.length);
                });
            }

            checkboxAll.change(function () {
                ul.find('input.subOption').prop('checked', this.checked);
            });
        }
    }

    function getFilterValues() {
        let form = $('#formArchiveFilter').serializeArray();
        let result = {
            type: [],
            eventSubcategories: []
        };
        for (const item of form) {
            if (!result[item.name])
                result[item.name] = [item.value];
            else
                result[item.name].push(item.value);

        }
        return result;
    }
})(jQuery);

(function ($) {
    var applicationPath = $("#main").attr("data-application-path");
    if (applicationPath == '/')
        applicationPath = '';

    let notFoundLabel = $('#whatHomeOnNotFoundLabel').val();
    let defaultImage = $('#whatOnHomeDefaultImage').val();
    let eventPageTemplate = $('#eventHomeDetailPageTemplate').val();
    let newsPageTemplate = $('#newsHomeDetailPageTemplate').val();
    const bigItemNumber = 2;

    let whatOnHomePageWidget = $('#homePageWhatOn');
    if (!whatOnHomePageWidget.length)
        return;

    let homeWhatOnPage = {
        skipCount: 0,
        takeCount: 5
    }

    $(document).ready(function () {
        getFeatureHighlights();
        getNews();
        getEvents();
    });

    function getFeatureHighlights() {
        $.ajax({
            type: 'GET',
            url: applicationPath + "/api/WhatOn/GetFeatureHighlights",
            data: homeWhatOnPage,
            contentType: "application/json; charset=utf-8",
            cache: true,
            success: function (data) {
                let items = data.result.Data;

                if (items.length) {
                    for (item of items.slice(0, bigItemNumber)) {
                        $('#homePageWhatOnAllTabContent .row').append(renderBigItem(item));
                    }

                    $('#homePageWhatOnAllTabContent .row').append(renderSmallItems(items));
                } else {
                    renderNotFoundLabel('#homePageWhatOnAllTabContent .row');
                }
                
            }
        });
    };

    function getNews() {
        $.ajax({
            type: 'GET',
            url: applicationPath + "/api/WhatOn/GetNews",
            contentType: "application/json; charset=utf-8",
            data: homeWhatOnPage,
            cache: true,
            success: function (data) {
                let items = data.result.Data;

                if (items.length) {
                    for (item of items.slice(0, bigItemNumber)) {
                        $('#homePageWhatOnAllNewsContent .row').append(renderBigItem(item));
                    }

                    $('#homePageWhatOnAllNewsContent .row').append(renderSmallItems(items));
                } else {
                    renderNotFoundLabel('#homePageWhatOnAllNewsContent .row');
                }
                
            }
        });
    };

    function getEvents() {
        $.ajax({
            type: 'GET',
            url: applicationPath + "/api/WhatOn/GetEvents",
            contentType: "application/json; charset=utf-8",
            data: homeWhatOnPage,
            cache: true,
            success: function (data) {
                let items = data.result.Data;

                if (items.length) {
                    for (item of items.slice(0, bigItemNumber)) {
                        $('#homePageWhatOnAllEventsContent .row').append(renderBigItem(item));
                    }

                    $('#homePageWhatOnAllEventsContent .row').append(renderSmallItems(items));
                } else {
                    renderNotFoundLabel('#homePageWhatOnAllEventsContent .row');
                }

                
            }
        });
    };

    function renderBigItem(item) {
        if (!item)
            return '';

        let isEvent = item.Type == "Event";
        let type = isEvent ? "EVENTS" : "NEWS";
        let url = generateUrl(item);

        return `<div class="col-lg-4 d-none d-lg-block">
                    <a href="${url}" target="${item.IsBlogWP ? '_blank' : ''}">
                        <div class="item h-100">
                            <img src="${generateImageUrl(item)}" alt="" class="w-100" />
                            <h5>${type}</h5>
                            <h4 class="title">${item.Title}</h4>
                            <p>${item.Description}</p>
                            <h4>${renderDateString(item.PublishedDate, item.EndDate, isEvent)}</h4>
                        </div>
                    </a>
                 </div>`;
    };


    function renderSmallItems(items) {
        return `<div class="col-lg-4">
                    <div class="row border-none bg-none h-100 flex-column justify-content-between">
                        ${items.map(function (item, index) {
                            if (index < bigItemNumber)
                                return renderItem(item, true);
                            return renderItem(item, false);
                        }).join('')}
                    </div>
                </div>`;
    }

    //isDlgNone is used for hide in desktopview, but show in mobile view
    function renderItem(item, isDlgNone) {
        if(!item)
            return '';

        let isEvent = item.Type == "Event";
        let type = isEvent ? "EVENTS" : "NEWS";
        let url = generateUrl(item);

        return `<div class="d-flex justify-content-between align-items-start small-item ${isDlgNone ? 'd-lg-none' : ''}">
                    <a href="${url}" target="${item.IsBlogWP ? '_blank' : ''} class="text-content">
                        <h5>${type}</h5>
                        <h4 class="title">${item.Title}</h4>
                        <p>${renderDateString(item.PublishedDate, item.EndDate, isEvent)}</p>
                    </a>
                    <a href="${url}">
                        <img src="${generateImageUrl(item)}" alt="" class="" />
                    </a>
                </div>`;
    }

    function generateUrl(item) {
        if (item.IsBlogWP)
            return item.WPLink;

        if (item.DetailURL)
            return item.DetailURL;

        let isEvent = item.Type == "Event";
        let prefix = isEvent ? eventPageTemplate : newsPageTemplate;

        return prefix + item.Path;
    }

    function generateImageUrl(item) {
        let imageUrl = item.IsBlogWP ? item.WPImageSrc : item.ImageURL;

        if (!imageUrl)
            imageUrl = item.ImageURL;

        if (!imageUrl)
            imageUrl = defaultImage;

        return imageUrl;
    }

    function renderDateString(start, end, isEvent) {
        if (!isEvent)
            return moment(start).format('DD MMM YYYY');

        if (end) {
            //if the same date
            if (moment(start).format('DD MMM YYYY') === moment(end).format('DD MMM YYYY'))
                //11 Aug 2021, 10:30am - 2:20pm
                return `${moment(end).format('DD MMM YYYY')}, ${moment(start).format('hh:mma')} - ${moment(end).format('hh:mma')}`;
            //if the same date
            else if (moment(start).format('YYYY') === moment(end).format('YYYY')) {
                //1 Aug - 15 Aug 2021, 10: 30am - 2: 20pm
                return `${moment(start).format('DD MMM')} - ${moment(end).format('DD MMM YYYY')}, ${moment(start).format('hh:mma')} - ${moment(end).format('hh:mma')}`;
            }
            else
                //24 Dec 2021 - 2 Jan 2022, 8:00am - 2:30pm
                return `${moment(start).format('DD MMM YYYY')} - ${moment(end).format('DD MMM YYYY')}, ${moment(start).format('hh:mma')} - ${moment(end).format('hh:mma')}`;
        }
        //25 Jul 2021, 05:00am,
        return moment(start).format('DD MMM YYYY, hh:mma');
    }

    function renderNotFoundLabel(element) {
        let html = `<h5 class="ml-4 mt-4">${notFoundLabel}</h5>`;
        $(element).html(html);
    };
})(jQuery);


(function ($) {
    var currentPageId = $("#user-dashboard-wrapper").data("currentPageId");
    var baseUrl = $("#user-dashboard-wrapper").data("baseUrl");

    $(".btn-save-with-checkbox").on("click", function (e) {
        getUser().then(function (user) {
            var selectedValues = [];
            var selectedLabels = [];
            var arrivalBox = $(e.target).parent().find("#checkbox-area");
            $(arrivalBox).find("input[type='checkbox']").each((_, chbox) => {
                if ($(chbox).is(":checked")) {
                    selectedValues.push($(chbox).val());
                    selectedLabels.push($(chbox).siblings("label").text());
                }
            });

            var subscribeData = selectedValues.join(',');
            var type = $(arrivalBox).data('tag');
            var nusnetid = $(arrivalBox).data('nusnetid');
            updateSubscribe(user, subscribeData, type, nusnetid,
                function (data, subscribeData, nusnetid, type) {
                    if (!data || data.status != 200) {
                        var msg = data && data.result ? data.result : $("#api-unknow-error-message").html();
                        showErrorMessage(msg, type);
                    } else {
                        pushToGA(selectedLabels, type);
                        showSuccessMessage(data.result.message, type);
                    }
                }
            );
        }, function (error) {
            RenderTagInputError($("#api-unknow-error-message").html());
        });
    });

    $(".btn-unsubscribe").on('click', function (e) {
        var type = $(e.target).data('tag');
        var nusnetid = $(e.target).data('nusnetid');

        $("#btn-confirm-unsubscribe").data('tag', type)
        $("#btn-confirm-unsubscribe").data('nusnetid', nusnetid)
    });

    $("#btn-confirm-unsubscribe").on('click', function (e) {
        getUser().then(function (user) {
            var type = $(e.target).data('tag');
            var nusnetid = $(e.target).data('nusnetid');
            unSubscribe(user, type, nusnetid)
        }, function (error) {
            showErrorMessage($("#api-unknow-error-message").html(), type);
        });
    });

    $("#buttonClosePopup").on('click', function (e) {
        var unsubsribePopup = $('#unsubsribeViaMail')
        unsubsribePopup.css('display', 'none')
        unsubsribePopup.removeClass('popup-dashboard-user show-popup');
    })

    $("#btnOk").on('click', function (e) {
        var unsubsribePopup = $('#unsubsribeViaMail')
        unsubsribePopup.removeClass('popup-dashboard-user show-popup');
        unsubsribePopup.css('display', 'none')
    })
    const delay = async (ms = 2000) =>
        new Promise(resolve => setTimeout(resolve, ms))

    async function pushToGA(selectedCategories, type) {
        if (selectedCategories) {
            var totalCat = selectedCategories.length;
            var totalRequest = Math.ceil(totalCat / 20);
            for (var i = 0; i < totalRequest; i++) {
                var sendingCategories = selectedCategories.slice(0, 20);
                selectedCategories = selectedCategories.slice(20);
                sendingCategories.forEach(cat => {
                    window.dataLayer = window.dataLayer || [];
                    window.dataLayer.push({
                        'event': 'alert_option_sel',
                        'alert_cat': type,
                        'alert_opt': cat,
                        'user_id': $('#user_id').val(),
                        'user_dept': $('#faculty').val(),
                        'user_group': $('#userGrp').val(),
                    });
                })
                await delay(2000);
            }
        }
    }

    function updateSubscribe(user, subscribeData, type_parms, nusnetid, callback = null) {
        showLoading();
        $.ajax({
            type: 'POST',
            url: baseUrl + "api/NUSAlertSubscribeInfo/UpdateSubscribe",
            headers: {
                "PGID": currentPageId,
                'Authorization': user.token_type + ' ' + user.access_token
            },
            contentType: "application/json",
            callback: callback,
            data: JSON.stringify({ SubscribeData: subscribeData, Type: type_parms, NusnetId: nusnetid }),
            subscribeData: subscribeData,
            nusnetid: nusnetid,
            type_parms: type_parms,
            dataType: "json",
            success: function (data) {
                if (callback) callback(data, subscribeData, nusnetid, type_parms);
            },
            error: function (error) {
                if (callback) callback(error, subscribeData, nusnetid, type_parms);
            },
            complete: function () {
                hideLoading();
            }
        });
    }

    function unSubscribe(user, type_parms, nusnetid) {
        showLoading();
        $.ajax({
            type: 'POST',
            url: baseUrl + "api/NUSAlertSubscribeInfo/UnSubscribe",
            contentType: "application/json",
            headers: {
                "PGID": currentPageId,
                'Authorization': user.token_type + ' ' + user.access_token
            },
            nusnetid: nusnetid,
            type_parms: type_parms,
            data: JSON.stringify({ Type: type_parms, NusnetId: nusnetid }),
            dataType: "json",
            success: function (data) {
                if (data.status == 200) {
                    $("div[data-nusnetid='" + nusnetid + "'][data-tag='" + type_parms + "']")
                        .find("input[type='checkbox']")
                        .each((index, val) => {
                            $(val).prop('checked', false);
                        });

                    var msg = data.result.message
                    showSuccessMessage(msg, type_parms);
                    return;
                }

                var msg = data && data.result ? data.result : $("#api-unknow-error-message").html();
                showErrorMessage(msg, type_parms);
            },
            error: function (error) {
                var msg = $("#api-unknow-error-message").html();
                showErrorMessage(msg, type_parms)
            },
            complete: function () {
                hideLoading();
            }
        });
    }

    function RenderTagInputError(msg) {
        $("#lbl-tag-btn-error").text(msg);
        $("#lbl-tag-btn-error").removeClass("d-none");
    }

    function showSuccessMessage(msg, type) {
        var lblSuccessMsg = `lbl-${safeText(type.toLocaleLowerCase())}-success`;
        var lblErrorMsg = `lbl-${safeText(type.toLocaleLowerCase())}-error`;

        // hide all error and success messages first
        $(".lbl-error.text-danger").addClass("d-none");;
        $(".lbl-success.text-success").addClass("d-none");;

        $("#" + lblSuccessMsg).text(msg)
        $("#" + lblSuccessMsg).removeClass("d-none");
        $("#" + lblErrorMsg).addClass("d-none");
    }

    function showErrorMessage(msg, type) {
        var lblErrorMsg = `lbl-${safeText(type.toLocaleLowerCase())}-error`;
        var lblSuccessMsg = `lbl-${safeText(type.toLocaleLowerCase())}-success`;

        // hide all error and success messages first
        $(".lbl-error.text-danger").addClass("d-none");;
        $(".lbl-success.text-success").addClass("d-none");;

        $("#" + lblErrorMsg).text(msg)
        $("#" + lblErrorMsg).removeClass("d-none");
        $("#" + lblSuccessMsg).addClass("d-none");
    }

    function safeText(text) {
        const el = document.createElement('div');
        el.innerHTML = text;
        return el.textContent;
    }
})(jQuery);
(function ($) {
    if(!window.dataLayer)
        return;

    let applicationPath = $("#main").attr("data-application-path");
    if (applicationPath === '/')
        applicationPath = '';
    
    let currentPath = $(location).attr('pathname');
    if (currentPath === '/')
        currentPath = '';
    currentPath = currentPath.endsWith('/') ? currentPath.slice(0, -1) : currentPath;

    $(document).ready(function() {
        const isFirstLogin = getUrlParameter('firstLogin') === 'true';
        if(isFirstLogin) {
            getUser().then(function (user) {
                $.ajax({
                    type: 'GET',
                    headers: {
                        'Authorization': user.token_type + ' ' + user.access_token
                    },
                    url: applicationPath + "/api/UserProfile/GetUserProfile",
                    contentType: "application/json; charset=utf-8",
                    success: function (data) {
                        var currentUser = data.result;
                        //submit gtag
                        window.dataLayer = window.dataLayer || [];
                        window.dataLayer.push({
                            'event': 'login',
                            'user_id' : sha256(currentUser.NusnetId),
                            'user_group': currentUser.UserGrp,
                            'user_dept': currentUser.Facdept,
                        });
                    }
                });
            });
        }
        
        //special case for Special Collection when the widget is drop using layout
        $('.gtag-discover-special').children().click(function () {
            let content = $(this).find('.discover-special-title').html();

            window.dataLayer = window.dataLayer || [];
            window.dataLayer.push({
                'event': 'select_content',
                'content_type' : 'special collections_' + getCurrentPage(),
                'content_title': content
            });
        });
    });

    function getUrlParameter(sParam) {
        const params = new URLSearchParams(window.location.search);
        return params.get(sParam);
      }
    
    //FAQ & Request
    $('.gtag-request-feedback a').click(function () {
        let content = $(this).html();
        
        window.dataLayer = window.dataLayer || [];
        window.dataLayer.push({
            'event': 'select_content',
            'content_type' : 'requests and feedbacks_' + getCurrentPage(),
            'content_title': content
        });
    });

    $('.gtag-top-5-faq a').click(function () {
        let content = $(this).html();
        
        window.dataLayer = window.dataLayer || [];
        window.dataLayer.push({
            'event': 'select_content',
            'content_type' : 'top 5 faqs_' + getCurrentPage(),
            'content_title': content
        });
    });
    
    $('.gtag-search-box a[href]').click(function () {
        let content = $(this).html();
        
        window.dataLayer = window.dataLayer || [];
        window.dataLayer.push({
            'event': 'select_content',
            'content_type' : 'search links_' + getCurrentPage(),
	        'content_title': content
        });
    });
    
    $('.gtag-search-term').on('keypress',function(e) {
        let text = $(this).val();
        if(e.which === 13 && text) {
            window.dataLayer = window.dataLayer || [];
            window.dataLayer.push({
                'event': 'one_search',
                'one_search_term': text
            });
        }
    });
    
    $('.gtag-search-btn').click(function () {
        let text = $('.gtag-search-term').val();
        if(text) {
            window.dataLayer = window.dataLayer || [];
            window.dataLayer.push({
                'event': 'one_search',
                'one_search_term': text
            });
        }
    });

    $('.gtag-searchbox').on('keypress',function(e) {
        let cat = $('#library-option').prop('checked') ? "NUS Libraries website" : "All NUS Websites";
        let text = $(this).val();
        if(e.which === 13 && cat && text) {
            window.dataLayer = window.dataLayer || [];
            window.dataLayer.push({
                'event': 'site_search',
                'site_search_cat': cat,
                'site_search_term': text
            });
        }
    });
    
    $('.gtag-site-search-btn').click(function () {
        let cat = $('#library-option').prop('checked') ? "NUS Libraries website" : "All NUS Websites";
        let text = $('.gtag-searchbox').val();
        if(cat && text) {
            window.dataLayer = window.dataLayer || [];
            window.dataLayer.push({
                'event': 'site_search',
                'site_search_cat': cat,
                'site_search_term': text
            });
        }
    });

    $('.gtag-btn-searh-mobile').click(function () {
        let cat = $('#f-option').prop('checked') ? "NUS Libraries website" : "All NUS Websites";
        let text = $('.gtag-searchboxmobile').val();
        if(cat && text) {
            window.dataLayer = window.dataLayer || [];
            window.dataLayer.push({
                'event': 'site_search',
                'site_search_cat': cat,
                'site_search_term': text
            });
        }
    });
    
    function getCurrentPage() {
        return applicationPath === currentPath ? "home" : handleGetPageUrl();
    }
    
    function handleGetPageUrl() {
        let result = currentPath;
        if(applicationPath && applicationPath !== '/'){
            result = result.replace(applicationPath, '');
        }
        
        //trim first / character
        result = result[0] === '/' ? result.substring(1) : result;
        return result;
    }

    function sha256(ascii) {
        function rightRotate(value, amount) {
            return (value>>>amount) | (value<<(32 - amount));
        };

        var mathPow = Math.pow;
        var maxWord = mathPow(2, 32);
        var lengthProperty = 'length'
        var i, j; // Used as a counter across the whole file
        var result = ''

        var words = [];
        var asciiBitLength = ascii[lengthProperty]*8;

        //* caching results is optional - remove/add slash from front of this line to toggle
        // Initial hash value: first 32 bits of the fractional parts of the square roots of the first 8 primes
        // (we actually calculate the first 64, but extra values are just ignored)
        var hash = sha256.h = sha256.h || [];
        // Round constants: first 32 bits of the fractional parts of the cube roots of the first 64 primes
        var k = sha256.k = sha256.k || [];
        var primeCounter = k[lengthProperty];
        /*/
        var hash = [], k = [];
        var primeCounter = 0;
        //*/

        var isComposite = {};
        for (var candidate = 2; primeCounter < 64; candidate++) {
            if (!isComposite[candidate]) {
                for (i = 0; i < 313; i += candidate) {
                    isComposite[i] = candidate;
                }
                hash[primeCounter] = (mathPow(candidate, .5)*maxWord)|0;
                k[primeCounter++] = (mathPow(candidate, 1/3)*maxWord)|0;
            }
        }

        ascii += '\x80' // Append Ƈ' bit (plus zero padding)
        while (ascii[lengthProperty]%64 - 56) ascii += '\x00' // More zero padding
        for (i = 0; i < ascii[lengthProperty]; i++) {
            j = ascii.charCodeAt(i);
            if (j>>8) return; // ASCII check: only accept characters in range 0-255
            words[i>>2] |= j << ((3 - i)%4)*8;
        }
        words[words[lengthProperty]] = ((asciiBitLength/maxWord)|0);
        words[words[lengthProperty]] = (asciiBitLength)

        // process each chunk
        for (j = 0; j < words[lengthProperty];) {
            var w = words.slice(j, j += 16); // The message is expanded into 64 words as part of the iteration
            var oldHash = hash;
            // This is now the undefinedworking hash", often labelled as variables a...g
            // (we have to truncate as well, otherwise extra entries at the end accumulate
            hash = hash.slice(0, 8);

            for (i = 0; i < 64; i++) {
                var i2 = i + j;
                // Expand the message into 64 words
                // Used below if 
                var w15 = w[i - 15], w2 = w[i - 2];

                // Iterate
                var a = hash[0], e = hash[4];
                var temp1 = hash[7]
                    + (rightRotate(e, 6) ^ rightRotate(e, 11) ^ rightRotate(e, 25)) // S1
                    + ((e&hash[5])^((~e)&hash[6])) // ch
                    + k[i]
                    // Expand the message schedule if needed
                    + (w[i] = (i < 16) ? w[i] : (
                            w[i - 16]
                            + (rightRotate(w15, 7) ^ rightRotate(w15, 18) ^ (w15>>>3)) // s0
                            + w[i - 7]
                            + (rightRotate(w2, 17) ^ rightRotate(w2, 19) ^ (w2>>>10)) // s1
                        )|0
                    );
                // This is only used once, so *could* be moved below, but it only saves 4 bytes and makes things unreadble
                var temp2 = (rightRotate(a, 2) ^ rightRotate(a, 13) ^ rightRotate(a, 22)) // S0
                    + ((a&hash[1])^(a&hash[2])^(hash[1]&hash[2])); // maj

                hash = [(temp1 + temp2)|0].concat(hash); // We don't bother trimming off the extra ones, they're harmless as long as we're truncating when we do the slice()
                hash[4] = (hash[4] + temp1)|0;
            }

            for (i = 0; i < 8; i++) {
                hash[i] = (hash[i] + oldHash[i])|0;
            }
        }

        for (i = 0; i < 8; i++) {
            for (j = 3; j + 1; j--) {
                var b = (hash[i]>>(j*8))&255;
                result += ((b < 16) ? 0 : '') + b.toString(16);
            }
        }
        return result;
    };
})(jQuery);